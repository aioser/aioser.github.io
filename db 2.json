{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/nprogress.js","path":"js/third-party/nprogress.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":1,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/avatar/avatar.png","path":"images/avatar/avatar.png","modified":1,"renderable":0},{"_id":"source/images/favicon_package/android-chrome-144x144.png","path":"images/favicon_package/android-chrome-144x144.png","modified":1,"renderable":0},{"_id":"source/images/favicon_package/browserconfig.xml","path":"images/favicon_package/browserconfig.xml","modified":1,"renderable":0},{"_id":"source/images/favicon_package/apple-touch-icon.png","path":"images/favicon_package/apple-touch-icon.png","modified":1,"renderable":0},{"_id":"source/images/favicon_package/favicon-16x16.png","path":"images/favicon_package/favicon-16x16.png","modified":1,"renderable":0},{"_id":"source/images/favicon_package/favicon.ico","path":"images/favicon_package/favicon.ico","modified":1,"renderable":0},{"_id":"source/images/favicon_package/mstile-150x150.png","path":"images/favicon_package/mstile-150x150.png","modified":1,"renderable":0},{"_id":"source/images/favicon_package/favicon-32x32.png","path":"images/favicon_package/favicon-32x32.png","modified":1,"renderable":0},{"_id":"source/images/favicon_package/safari-pinned-tab.svg","path":"images/favicon_package/safari-pinned-tab.svg","modified":1,"renderable":0},{"_id":"source/images/favicon_package/site.webmanifest","path":"images/favicon_package/site.webmanifest","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"1ccae4ff255d2d6ba8d470046b86bed97daefcf0","modified":1629255521258},{"_id":"source/_drafts/iap.md","hash":"d685ba91efac37dc4de3807c84ce7c3589e481a1","modified":1628588611080},{"_id":"source/_posts/hexo.md","hash":"d3ec4206779b3f02fffef6fa8b5cc62d8df5c723","modified":1629258754952},{"_id":"source/_drafts/vision.md","hash":"cc159013a98c6329f2b8785236a08cc9d4319727","modified":1628067075929},{"_id":"source/_posts/image-preview.md","hash":"b4b4d061bbb90a5fd73f5d581edacbebcaf404f2","modified":1629448814090},{"_id":"source/_posts/ios-apm.md","hash":"78e0f2cdc228134a4e0c46fb99fecc0d3d83cfa1","modified":1630398618817},{"_id":"source/_posts/ios_tag.md","hash":"a8e978c63cb543714018e21ff970828b998ab489","modified":1628504058790},{"_id":"source/_posts/xcode-server.md","hash":"6053b0ceab4560fa776830ad379838b29b2809dd","modified":1628504029864},{"_id":"source/_posts/core-spotlight.md","hash":"7863af08b530518280dcacb21f8da3b1935c6835","modified":1629697578416},{"_id":"source/about/index.md","hash":"c28e8c2d5c82d54a5dd1c5f0c5473f1ed70d52e4","modified":1629690884417},{"_id":"source/tags/index.md","hash":"77b8bb5eac5a5aab14b7b61e9f765a52bd7afa4d","modified":1627969878367},{"_id":"source/books/index.md","hash":"1e48b4fd03d1381fbccd740d4041649b8bbf383d","modified":1629696191278},{"_id":"source/images/favicon_package/browserconfig.xml","hash":"974aea18bda5a95802c06b80126ab1d96d91d708","modified":1627898078165},{"_id":"source/images/favicon_package/android-chrome-144x144.png","hash":"8f0ed8235d4cc911a94637658c4f8b699815c1f6","modified":1627898076306},{"_id":"source/images/favicon_package/apple-touch-icon.png","hash":"8f0ed8235d4cc911a94637658c4f8b699815c1f6","modified":1627897779852},{"_id":"source/images/favicon_package/favicon-16x16.png","hash":"33496cf71b667dc6596fad86be0457a29ff04476","modified":1627897779853},{"_id":"source/images/favicon_package/favicon.ico","hash":"4234d2d693fca7542e55c9149ebfb660cbe77d8e","modified":1627897779854},{"_id":"source/images/favicon_package/mstile-150x150.png","hash":"3054e38854fc4faf6a0f6e8ec5c8d2e05dc26bac","modified":1627898081316},{"_id":"source/images/favicon_package/site.webmanifest","hash":"dd18a28f6aac2af0a9da25c4258d08d2aec81a0c","modified":1627898080267},{"_id":"source/images/favicon_package/favicon-32x32.png","hash":"c1386079cffd6ca2c4d30ae2ce7fc6beaa913f97","modified":1627897779854},{"_id":"source/images/favicon_package/safari-pinned-tab.svg","hash":"0fc9fae1143cd4857e8df1eb6d74d64e1b5459da","modified":1627897779856},{"_id":"source/.DS_Store","hash":"21df95e11cc469847fcdbf1680c267b348e4b231","modified":1630057049459},{"_id":"node_modules/hexo-theme-next/package.json","hash":"87da9fac8741ed5fa67fb520cdb3a8488c212734","modified":499162500000},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/README.md","hash":"fab15a85d9d8d90ecd8879525b9b74fb1c197978","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":499162500000},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"eff30232f668f47d1f734fdd914fec0d18095817","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"651e3b33d86a7cdb9fd7895ca28279f8b1a24faa","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"2924be391e4841e2166e83d4d18515c4d247653f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"6387357ac2dd498e8b8d630d27050a59180d7e8f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"2a9861db4547a524b2609c1e7e1061d2e9d48ee4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"e9af1afe529ca747a04b801401d394b2ad696fde","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"87edab5a3eb7577a409c01df3f1631de40f8956f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"9cd3eca2c468bb46c7c5bf391bea4b025af178f6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"37ec3d1bcd20b8ac1d18e0d68f990450890b46cd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"8ee5ca39ac4a372a5c0f16e344bbe578af4aeae4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"6cd707f846bfd6becbcfb060c26958bb4015c31f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"a20ed899d6a797de0b35c46bfd03722023649187","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"b106599106285ecd4c0c1e0ed11c46a36b5a69d5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"02bafc6ee86263790603861e356596f0c916e392","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"0a590e87af50e57b15fc37695c9a3bf4a97c3d92","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"c12f8a7497596441503f2541d2f746f2ee7dd594","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/nprogress.njk","hash":"80fd1a45e91207fc16df1136e12b8b71b4f65dea","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"13e7badc036e989307069f65b179deb107012435","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"acef5acc728f24cb657be8d7010d836b4d556b0e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"b37f9847d2f95632e911df670b51921a7d748068","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"76bba5d7916e9930e68215a0fce3a7d81c44510f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"5bfc1cea214bd31847adc356f37df8e0b6a449df","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"71d62fc3584c47ff2d4cc945226e412264399be9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"89091bc943cd8b8c63b8af3d26fb0a027048e9ba","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"99ab10d9aef1ee5ae5e8f3572ac0de25c3cc4416","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"0cd7da6755459d60779f0a7ccf311e26e184d55d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"42a9b81c5449afa9d67770604478168333c93804","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"b9785bc737470e9b8e910e7da9e8c45c2ead58fa","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"454ed1fac07be972c7ec911092f0995cd925aab3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"2ecaa30ec42d28ef769d875cf2d26959b8de7d24","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"79102d9e9bccff6224e77a77c4d2d363094ae3df","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"ffb6c69a9c90793cbe9bf0544b55f7a41c016d8f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"cdf2a692baa5cd34104ffabced2c5ef608b62cf5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"1084e38df2f05a2f58df7f987e660775e9be1bf2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"49aa8de07918a11399131dfd703418af3f0a1a19","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"c9390824b57f23b7c8a5c23a9834514123673766","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"53895b3af95667edc5bf5d7356f8a2b4fe091447","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"b46f412c0b4f775fd329d50357f722f5d7c1a3ba","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"ca2ccf3cf1874c45712f192ad45dea96fbd9920d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"471dcbe22d0dbe043dcf25a1a1c17ca76aa9a548","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"7384e6390067ef2a84e7310d6adb3f6104ed62e2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-footer.njk","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"5c01e380ba843f8016d8fa4593432430f5bd3584","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"2d36a481a70d5f450f1f166dc556ac1218b18537","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"d82c24136bbd3443b85f07f5579845833b594684","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"3fc91aba5b17a5ae60b8e04707a7da87db4d0340","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":499162500000},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"32a1b73944561655087d80f025208a84e012b3cf","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/nprogress.js","hash":"7d56b18a2bdece5468470c70c5f3eb79d4120964","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"62f4638674c92dfb72454fee38751d0227d3d225","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"6f58cd7aa8f6f1ab92d5a96551add293f4e55312","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"92ab6bb3c3122980699f0613dac27a7cabfedecc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"b281be775b693f9bf32766c8f6ef703c72ac9b00","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"13b3301aa9b613975630502d93e6ae82c5293aa8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"aa05e6b3d613a756178b8ba06832ad27499d4c14","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"135b87d151055eefdbc711d9e704b112b3214a84","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"ece860218125bdb2578f373ed4f5040c9670e4b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d4809783ded05625675b1b4bbd9e99d7f5f7d7f9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"3c7ae405dd30b9b46494a6b9a6cb1b7ec6138ba9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"0c9f72ad98807521cbdcee7b5bbe2e884311db39","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"aafbb3c5c20f525a92716d89ff216c3081d7b4da","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"2e58cb90a77d3dd16e02b8949808b4b16453828c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"2a29bf3692f42f84e8f29314e0fb349f86fc727a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"41cba8c4c5637a6b8f1b62e67673b33676f5d734","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"b332868d76d9f1651efd65abfc0d3c9d699b1a45","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"357b899ac0f0dfbbbebf1ea972030c7cefa463ce","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"8a70d51d8f7cd113e5fbc9f0e70c46a072f282c8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"be5c46b983df08b9dbac1b4749b1a101b54b6b50","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"8c8ebec444c727b704ea41ad88b0b96ed2e4b8d4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"9771db8b6b2541181a0e463c4bf305276d47657d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"b37f1b14aef2402d0c2d88f999ff0ce5ef6823c1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"aafb764c64f6cd5a48ad194adf65ac77078242b1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"dbac7197ebffecf4bf32f8a3cddef434f17f2ca1","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"b3fa752f72ca1413289b76c56fbd33a00e3d25d7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"76d0dfb3a8b873a6180604ac6daecf38b6a963a2","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"bef7791a2e67e79f02076f2a89e1c7f95a83048c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"4f482514230c941c9475e1272188e53a54975463","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"d6d60f02b5e9f89dbfce180b3884030898022664","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"cf194bea1c9e67fde871a04de3bc81df72c54277","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"f1778d2c56974b96dae429456d5c55be325c4946","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"9a47c9045e443b8d20932f9c564a3a05fa4c6b51","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"7102f8e819b62cf7d121fd063dc663fd068feaa6","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"b457756758f0632767e8a560e3033059cbe4a67b","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"83c6588c51cd418336f4945813410a100ddfe2a4","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"2c534d2b2dbc932ad65d335a720a7ba9612bac04","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"2896840ab8ac8ab2a7f76d18df893f290ac31625","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"bf88d9c585d7b00463c46352402cfea415c29493","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"eae7b83f1c711ad2ab3a41d89f517445856ffec8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"f7ff85fe6c4efb8ff036fab2c3277b7d8bed69a8","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"6394340c28a21f6aa90e786f3bfe24fb26595653","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"69eb1c282a8fd5dbab606cc09c34c5dc8e44e753","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"432e73bc4f99322af6af1852e0ea6e674919c31a","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"08e79881d58d01afab6dbed37ab4f52356564d7e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"15a5e273a8137550c93c8d2a60f9fcf86e04a89e","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"cef4e779473daa3761709958243c6b8a57bbd814","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"2421500e447822ef1b6826403a3e1df3345641d7","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"50b00218e854200c4ec0573a841e226d49c45cba","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"3c029a003e9bf747e1b9cc7c0c127f6028374876","modified":499162500000},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"f53e6c12bd4805888f696386d00668f23cd335e7","modified":499162500000},{"_id":"source/images/avatar/avatar.png","hash":"5f9a3245548025ae01897311108b94c7ae848468","modified":1627958131148},{"_id":"public/about/index.html","hash":"be5502ce73eb2e21aa9cd568287f3fda507c1a35","modified":1630398622366},{"_id":"public/books/index.html","hash":"805361d96c3952d147d8bbc622c8f757ecf6bde0","modified":1630398622366},{"_id":"public/tags/index.html","hash":"dbd8a88f6821d06d500027363129b8c403b946c7","modified":1630398622366},{"_id":"public/archives/index.html","hash":"8917dd73e37a2b7a3665fa064b7c23ca88fd3856","modified":1630398622366},{"_id":"public/archives/2021/index.html","hash":"a7e8767b767c46759c7e834d60d19df913f39eeb","modified":1630398622366},{"_id":"public/archives/2021/07/index.html","hash":"3dfaeaa134f3bf10d3cfaee2b94eb0e508071624","modified":1630398622366},{"_id":"public/archives/2021/08/index.html","hash":"4abd142d8a14eb43bc06dcb3ce3758d4bf8059d9","modified":1630398622366},{"_id":"public/categories/技术/index.html","hash":"8f9d6ce5c472a3757feab2d48e8b55ebc0f13436","modified":1630398622366},{"_id":"public/categories/技术/iOS/index.html","hash":"873ad35473e643860bbf848736fc62bb2612d942","modified":1630398622366},{"_id":"public/categories/技术/Hexo/index.html","hash":"d062b24572b8e4a8f46ba057b4dbb7a26c86865a","modified":1630398622366},{"_id":"public/categories/技术/iOS/艾特/index.html","hash":"efb6d0eba79a8f652b444ba176ef9af948062481","modified":1630398622366},{"_id":"public/categories/技术/Hexo/Next/index.html","hash":"b73a41517e8cc43fad939a2817e1557cd77e1994","modified":1630398622366},{"_id":"public/tags/iOS/index.html","hash":"744cdecaf57b98e3e7f8762adf99ff5f31f180ab","modified":1630398622366},{"_id":"public/categories/技术/iOS/艾特/YYText/index.html","hash":"ece30f684c264d73f4b040c358b4c6a0ecc6af3d","modified":1630398622366},{"_id":"public/tags/spotlight/index.html","hash":"65a1a38c0e663180bd038524fce2321f5cef45af","modified":1630398622366},{"_id":"public/tags/搜索/index.html","hash":"cd7d5b942fc9e9e58cd199b0d28e55bfc6fdfaf0","modified":1630398622366},{"_id":"public/tags/技术/index.html","hash":"8b452946e28403e717e0d1c8fc006866b59562f1","modified":1630398622366},{"_id":"public/tags/Hexo/index.html","hash":"d572ac2e63379a808b6a03747dd1f4e1de54b981","modified":1630398622366},{"_id":"public/tags/Next/index.html","hash":"c6a0dfa829ce790e28a406325e53e02ae96bf320","modified":1630398622366},{"_id":"public/tags/image-preview/index.html","hash":"1b80d2dcd67c64926fe1c22faf79ffc3089442e3","modified":1630398622366},{"_id":"public/tags/Photos/index.html","hash":"c11d45a897e5009901d857431284c868d9d4c25a","modified":1630398622366},{"_id":"public/tags/艾特/index.html","hash":"b75b87569663928a5d7b50319af68eb8441041e4","modified":1630398622366},{"_id":"public/tags/YYText/index.html","hash":"c1a1d9f94973770ef1b7450225e67f12e3edbdc7","modified":1630398622366},{"_id":"public/tags/CI/index.html","hash":"6c58c9e1bda7aaa45f404a16a5e4ea7c3a73f128","modified":1630398622366},{"_id":"public/tags/xcode-server/index.html","hash":"0291bdb1a7b2a4c0d0a07d2f900abd5bb4207d3a","modified":1630398622366},{"_id":"public/tags/持续集成/index.html","hash":"da67aff2471cd36ed754541e296888864469d08f","modified":1630398622366},{"_id":"public/tags/xcode/index.html","hash":"24cea9e90d2d198867e5a15afc4c005c07f6dad0","modified":1630398622366},{"_id":"public/ios-apm/index.html","hash":"e6ad60d8b95b61c003999ac090ed2dba2dda31bf","modified":1630398622366},{"_id":"public/core-spotlight/index.html","hash":"9cc8fefff64d3d1d9b0cb31568a091e2ab88fdba","modified":1630398622366},{"_id":"public/image-preview/index.html","hash":"fd4e03d27f7e725f28e4ce3fad890348783581b1","modified":1630398622366},{"_id":"public/ios_tag/index.html","hash":"106ac0230a3edb1f350d4f3bb9ac5916b516ddcf","modified":1630398622366},{"_id":"public/hexo/index.html","hash":"788bf9b5d14d5c20fcd7338183134a63bb1f5da4","modified":1630398622366},{"_id":"public/xcode-server/index.html","hash":"d58ed10b7c584dbbce80314a0349cde5e470049f","modified":1630398622366},{"_id":"public/index.html","hash":"7fb702f30b1a5161498fdd1d8d55cf53703c2c83","modified":1630398622366},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1630398622366},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1630398622366},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1630398622366},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1630398622366},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1630398622366},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1630398622366},{"_id":"public/images/favicon_package/android-chrome-144x144.png","hash":"8f0ed8235d4cc911a94637658c4f8b699815c1f6","modified":1630398622366},{"_id":"public/images/favicon_package/browserconfig.xml","hash":"974aea18bda5a95802c06b80126ab1d96d91d708","modified":1630398622366},{"_id":"public/CNAME","hash":"1ccae4ff255d2d6ba8d470046b86bed97daefcf0","modified":1630398622366},{"_id":"public/images/favicon_package/favicon-16x16.png","hash":"33496cf71b667dc6596fad86be0457a29ff04476","modified":1630398622366},{"_id":"public/images/favicon_package/favicon.ico","hash":"4234d2d693fca7542e55c9149ebfb660cbe77d8e","modified":1630398622366},{"_id":"public/images/favicon_package/mstile-150x150.png","hash":"3054e38854fc4faf6a0f6e8ec5c8d2e05dc26bac","modified":1630398622366},{"_id":"public/images/favicon_package/favicon-32x32.png","hash":"c1386079cffd6ca2c4d30ae2ce7fc6beaa913f97","modified":1630398622366},{"_id":"public/images/favicon_package/safari-pinned-tab.svg","hash":"0fc9fae1143cd4857e8df1eb6d74d64e1b5459da","modified":1630398622366},{"_id":"public/images/favicon_package/site.webmanifest","hash":"dd18a28f6aac2af0a9da25c4258d08d2aec81a0c","modified":1630398622366},{"_id":"public/images/favicon_package/apple-touch-icon.png","hash":"8f0ed8235d4cc911a94637658c4f8b699815c1f6","modified":1630398622366},{"_id":"public/css/noscript.css","hash":"54d14cd43dc297950a4a8d39ec9644dd5fc3499f","modified":1630398622366},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1630398622366},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1630398622366},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1630398622366},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1630398622366},{"_id":"public/js/next-boot.js","hash":"2ecaa30ec42d28ef769d875cf2d26959b8de7d24","modified":1630398622366},{"_id":"public/js/schedule.js","hash":"71d62fc3584c47ff2d4cc945226e412264399be9","modified":1630398622366},{"_id":"public/js/pjax.js","hash":"5bfc1cea214bd31847adc356f37df8e0b6a449df","modified":1630398622366},{"_id":"public/js/utils.js","hash":"cdf2a692baa5cd34104ffabced2c5ef608b62cf5","modified":1630398622366},{"_id":"public/js/schemes/muse.js","hash":"62f4638674c92dfb72454fee38751d0227d3d225","modified":1630398622366},{"_id":"public/js/third-party/nprogress.js","hash":"7d56b18a2bdece5468470c70c5f3eb79d4120964","modified":1630398622366},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1630398622366},{"_id":"public/js/third-party/quicklink.js","hash":"6f58cd7aa8f6f1ab92d5a96551add293f4e55312","modified":1630398622366},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1630398622366},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1630398622366},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1630398622366},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1630398622366},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1630398622366},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1630398622366},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1630398622366},{"_id":"public/js/third-party/math/mathjax.js","hash":"9771db8b6b2541181a0e463c4bf305276d47657d","modified":1630398622366},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1630398622366},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1630398622366},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1630398622366},{"_id":"public/js/third-party/comments/changyan.js","hash":"8c8ebec444c727b704ea41ad88b0b96ed2e4b8d4","modified":1630398622366},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1630398622366},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1630398622366},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1630398622366},{"_id":"public/js/third-party/search/local-search.js","hash":"b37f1b14aef2402d0c2d88f999ff0ce5ef6823c1","modified":1630398622366},{"_id":"public/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1630398622366},{"_id":"public/js/third-party/tags/mermaid.js","hash":"aafb764c64f6cd5a48ad194adf65ac77078242b1","modified":1630398622366},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1630398622366},{"_id":"public/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1630398622366},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1630398622366},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1630398622366},{"_id":"public/css/main.css","hash":"f1d6259ffa1a510c27e8715234d566caf7dd7db5","modified":1630398622366},{"_id":"public/images/avatar/avatar.png","hash":"5f9a3245548025ae01897311108b94c7ae848468","modified":1630398622366}],"Category":[{"name":"技术","_id":"ckszt8srg000arcp8b2vz4962"},{"name":"iOS","parent":"ckszt8srg000arcp8b2vz4962","_id":"ckszt8sri000ercp85u546e4g"},{"name":"Hexo","parent":"ckszt8srg000arcp8b2vz4962","_id":"ckszt8sri000grcp84b335pyg"},{"name":"艾特","parent":"ckszt8sri000ercp85u546e4g","_id":"ckszt8sri000ircp87olqef18"},{"name":"Next","parent":"ckszt8sri000grcp84b335pyg","_id":"ckszt8srj000lrcp81273gdf3"},{"name":"YYText","parent":"ckszt8sri000ircp87olqef18","_id":"ckszt8srn000qrcp81tkuco51"}],"Data":[],"Page":[{"title":"谁能拒绝一个会写代码的书🐛那","_content":"\n- 刘俊臣\n- 6年iOS开发弱鸡\n    - 时常感叹自己懂得太少\n    - 又感叹自己浅尝辄止\n- 经历\n    - 2010年 - 2014年: 就读于`郑州轻工业学院`, 数学与应用数学专业\n        - 母校已经升格为`郑州轻工业大学`了~\n    - 2014年5月 - 2014年12月: 就职于`联创世界科技有限公司`, iOS开发工程师\n    - 2014年12月 - 2016年5月: 就职于`郑州蓝鸥科技有限公司`, iOS技术讲师\n        - 没错, 我是讲师🧟‍♀️\n    - 2016年5月 - : 就职于`上海假面信息科技有限公司`, iOS开发工程师\n- 主要工作\n    - 敲代码\n- 技术栈\n    - `Objective—C`: 主要\n    - `Swift`: 主要\n    - `React Native`: 一般\n    - `Flutter`: 一般\n    - `Node.JS`: 偶尔\n\n","source":"about/index.md","raw":"---\ntitle: 谁能拒绝一个会写代码的书🐛那\n---\n\n- 刘俊臣\n- 6年iOS开发弱鸡\n    - 时常感叹自己懂得太少\n    - 又感叹自己浅尝辄止\n- 经历\n    - 2010年 - 2014年: 就读于`郑州轻工业学院`, 数学与应用数学专业\n        - 母校已经升格为`郑州轻工业大学`了~\n    - 2014年5月 - 2014年12月: 就职于`联创世界科技有限公司`, iOS开发工程师\n    - 2014年12月 - 2016年5月: 就职于`郑州蓝鸥科技有限公司`, iOS技术讲师\n        - 没错, 我是讲师🧟‍♀️\n    - 2016年5月 - : 就职于`上海假面信息科技有限公司`, iOS开发工程师\n- 主要工作\n    - 敲代码\n- 技术栈\n    - `Objective—C`: 主要\n    - `Swift`: 主要\n    - `React Native`: 一般\n    - `Flutter`: 一般\n    - `Node.JS`: 偶尔\n\n","date":"2021-08-27T04:46:36.145Z","updated":"2021-08-23T03:54:44.417Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckszt8sr50000rcp8edqzb0ie","content":"<ul>\n<li>刘俊臣</li>\n<li>6年iOS开发弱鸡<ul>\n<li>时常感叹自己懂得太少</li>\n<li>又感叹自己浅尝辄止</li>\n</ul>\n</li>\n<li>经历<ul>\n<li>2010年 - 2014年: 就读于<code>郑州轻工业学院</code>, 数学与应用数学专业<ul>\n<li>母校已经升格为<code>郑州轻工业大学</code>了~</li>\n</ul>\n</li>\n<li>2014年5月 - 2014年12月: 就职于<code>联创世界科技有限公司</code>, iOS开发工程师</li>\n<li>2014年12月 - 2016年5月: 就职于<code>郑州蓝鸥科技有限公司</code>, iOS技术讲师<ul>\n<li>没错, 我是讲师🧟‍♀️</li>\n</ul>\n</li>\n<li>2016年5月 - : 就职于<code>上海假面信息科技有限公司</code>, iOS开发工程师</li>\n</ul>\n</li>\n<li>主要工作<ul>\n<li>敲代码</li>\n</ul>\n</li>\n<li>技术栈<ul>\n<li><code>Objective—C</code>: 主要</li>\n<li><code>Swift</code>: 主要</li>\n<li><code>React Native</code>: 一般</li>\n<li><code>Flutter</code>: 一般</li>\n<li><code>Node.JS</code>: 偶尔</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"length":269,"excerpt":"","more":"<ul>\n<li>刘俊臣</li>\n<li>6年iOS开发弱鸡<ul>\n<li>时常感叹自己懂得太少</li>\n<li>又感叹自己浅尝辄止</li>\n</ul>\n</li>\n<li>经历<ul>\n<li>2010年 - 2014年: 就读于<code>郑州轻工业学院</code>, 数学与应用数学专业<ul>\n<li>母校已经升格为<code>郑州轻工业大学</code>了~</li>\n</ul>\n</li>\n<li>2014年5月 - 2014年12月: 就职于<code>联创世界科技有限公司</code>, iOS开发工程师</li>\n<li>2014年12月 - 2016年5月: 就职于<code>郑州蓝鸥科技有限公司</code>, iOS技术讲师<ul>\n<li>没错, 我是讲师🧟‍♀️</li>\n</ul>\n</li>\n<li>2016年5月 - : 就职于<code>上海假面信息科技有限公司</code>, iOS开发工程师</li>\n</ul>\n</li>\n<li>主要工作<ul>\n<li>敲代码</li>\n</ul>\n</li>\n<li>技术栈<ul>\n<li><code>Objective—C</code>: 主要</li>\n<li><code>Swift</code>: 主要</li>\n<li><code>React Native</code>: 一般</li>\n<li><code>Flutter</code>: 一般</li>\n<li><code>Node.JS</code>: 偶尔</li>\n</ul>\n</li>\n</ul>\n"},{"title":"读书","_content":"\n- 剑来\n\n- 雪中悍刀行\n\n- 曾国藩家书\n\n- 平凡的世界\n\n- 尘埃落定\n\n- 儒林外史\n\n","source":"books/index.md","raw":"---\ntitle: 读书\n---\n\n- 剑来\n\n- 雪中悍刀行\n\n- 曾国藩家书\n\n- 平凡的世界\n\n- 尘埃落定\n\n- 儒林外史\n\n","date":"2021-08-27T04:46:36.164Z","updated":"2021-08-23T05:23:11.278Z","path":"books/index.html","comments":1,"layout":"page","_id":"ckszt8sra0002rcp8c0x1gd4q","content":"<ul>\n<li><p>剑来</p>\n</li>\n<li><p>雪中悍刀行</p>\n</li>\n<li><p>曾国藩家书</p>\n</li>\n<li><p>平凡的世界</p>\n</li>\n<li><p>尘埃落定</p>\n</li>\n<li><p>儒林外史</p>\n</li>\n</ul>\n","site":{"data":{}},"length":25,"excerpt":"","more":"<ul>\n<li><p>剑来</p>\n</li>\n<li><p>雪中悍刀行</p>\n</li>\n<li><p>曾国藩家书</p>\n</li>\n<li><p>平凡的世界</p>\n</li>\n<li><p>尘埃落定</p>\n</li>\n<li><p>儒林外史</p>\n</li>\n</ul>\n"},{"title":"tags","date":"2021-08-03T05:44:18.000Z","type":"tags","tags":["技术","iOS"],"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-08-03 13:44:18\ntype: tags\ntags: [技术, iOS]\n---\n","updated":"2021-08-03T05:51:18.367Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckszt8srd0005rcp89y92cwe3","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"vision","_content":"","source":"_drafts/vision.md","raw":"---\ntitle: vision\ntags: [iOS, 识别, vision, SDK, CoreML]\n---\n","slug":"vision","published":0,"date":"2021-08-04T08:49:33.812Z","updated":"2021-08-04T08:51:15.929Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckszt8sr70001rcp8hvm1cfsv","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"iap","_content":"\n#### 什么是iap\n    - 概念\n        - 基础\n    - 分类\n        - 消耗型项目: 只可使用一次的产品，使用之后即失效，必须再次购买。\n            示例：钓鱼 App 中的鱼食。\n        - 非消耗型项目: 只需购买一次，不会过期或随着使用而减少的产品。\n            示例：游戏 App 的赛道。\n        - 非续期订阅: 允许用户购买有时限性服务的产品。此 App 内购买项目的内容可以是静态的。此类订阅不会自动续期。\n            示例：为期一年的已归档文章目录订阅。\n#### StoreKit实践\n    - 通用\n        - 基础\n            - 逻辑\n            - note\n                - applicationUsername 作用\n                - 4个status\n                - `finishQueue`\n        - sandbox环境\n        - 验证逻辑\n            - 客户端验证\n                - note:\n                    - 修改本地时间\n            - 服务端验证\n                - 回执信息存储\n                - 轮询\n    - 问题:\n        - 订阅问题\n        - 退款问题\n#### server-to-server notification\n    - 订阅类型状态变更\n    - wwdc2020 新增退款推送\n#### StoreKitTest\n    - 配置\n\n","source":"_drafts/iap.md","raw":"---\ntitle: iap\n---\n\n#### 什么是iap\n    - 概念\n        - 基础\n    - 分类\n        - 消耗型项目: 只可使用一次的产品，使用之后即失效，必须再次购买。\n            示例：钓鱼 App 中的鱼食。\n        - 非消耗型项目: 只需购买一次，不会过期或随着使用而减少的产品。\n            示例：游戏 App 的赛道。\n        - 非续期订阅: 允许用户购买有时限性服务的产品。此 App 内购买项目的内容可以是静态的。此类订阅不会自动续期。\n            示例：为期一年的已归档文章目录订阅。\n#### StoreKit实践\n    - 通用\n        - 基础\n            - 逻辑\n            - note\n                - applicationUsername 作用\n                - 4个status\n                - `finishQueue`\n        - sandbox环境\n        - 验证逻辑\n            - 客户端验证\n                - note:\n                    - 修改本地时间\n            - 服务端验证\n                - 回执信息存储\n                - 轮询\n    - 问题:\n        - 订阅问题\n        - 退款问题\n#### server-to-server notification\n    - 订阅类型状态变更\n    - wwdc2020 新增退款推送\n#### StoreKitTest\n    - 配置\n\n","slug":"iap","published":0,"date":"2021-08-05T04:07:06.459Z","updated":"2021-08-10T09:43:31.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckszt8srb0003rcp8gvy371y4","content":"<h4 id=\"什么是iap\"><a href=\"#什么是iap\" class=\"headerlink\" title=\"什么是iap\"></a>什么是iap</h4><pre><code>- 概念\n    - 基础\n- 分类\n    - 消耗型项目: 只可使用一次的产品，使用之后即失效，必须再次购买。\n        示例：钓鱼 App 中的鱼食。\n    - 非消耗型项目: 只需购买一次，不会过期或随着使用而减少的产品。\n        示例：游戏 App 的赛道。\n    - 非续期订阅: 允许用户购买有时限性服务的产品。此 App 内购买项目的内容可以是静态的。此类订阅不会自动续期。\n        示例：为期一年的已归档文章目录订阅。\n</code></pre>\n<h4 id=\"StoreKit实践\"><a href=\"#StoreKit实践\" class=\"headerlink\" title=\"StoreKit实践\"></a>StoreKit实践</h4><pre><code>- 通用\n    - 基础\n        - 逻辑\n        - note\n            - applicationUsername 作用\n            - 4个status\n            - `finishQueue`\n    - sandbox环境\n    - 验证逻辑\n        - 客户端验证\n            - note:\n                - 修改本地时间\n        - 服务端验证\n            - 回执信息存储\n            - 轮询\n- 问题:\n    - 订阅问题\n    - 退款问题\n</code></pre>\n<h4 id=\"server-to-server-notification\"><a href=\"#server-to-server-notification\" class=\"headerlink\" title=\"server-to-server notification\"></a>server-to-server notification</h4><pre><code>- 订阅类型状态变更\n- wwdc2020 新增退款推送\n</code></pre>\n<h4 id=\"StoreKitTest\"><a href=\"#StoreKitTest\" class=\"headerlink\" title=\"StoreKitTest\"></a>StoreKitTest</h4><pre><code>- 配置\n</code></pre>\n","site":{"data":{}},"length":374,"excerpt":"","more":"<h4 id=\"什么是iap\"><a href=\"#什么是iap\" class=\"headerlink\" title=\"什么是iap\"></a>什么是iap</h4><pre><code>- 概念\n    - 基础\n- 分类\n    - 消耗型项目: 只可使用一次的产品，使用之后即失效，必须再次购买。\n        示例：钓鱼 App 中的鱼食。\n    - 非消耗型项目: 只需购买一次，不会过期或随着使用而减少的产品。\n        示例：游戏 App 的赛道。\n    - 非续期订阅: 允许用户购买有时限性服务的产品。此 App 内购买项目的内容可以是静态的。此类订阅不会自动续期。\n        示例：为期一年的已归档文章目录订阅。\n</code></pre>\n<h4 id=\"StoreKit实践\"><a href=\"#StoreKit实践\" class=\"headerlink\" title=\"StoreKit实践\"></a>StoreKit实践</h4><pre><code>- 通用\n    - 基础\n        - 逻辑\n        - note\n            - applicationUsername 作用\n            - 4个status\n            - `finishQueue`\n    - sandbox环境\n    - 验证逻辑\n        - 客户端验证\n            - note:\n                - 修改本地时间\n        - 服务端验证\n            - 回执信息存储\n            - 轮询\n- 问题:\n    - 订阅问题\n    - 退款问题\n</code></pre>\n<h4 id=\"server-to-server-notification\"><a href=\"#server-to-server-notification\" class=\"headerlink\" title=\"server-to-server notification\"></a>server-to-server notification</h4><pre><code>- 订阅类型状态变更\n- wwdc2020 新增退款推送\n</code></pre>\n<h4 id=\"StoreKitTest\"><a href=\"#StoreKitTest\" class=\"headerlink\" title=\"StoreKitTest\"></a>StoreKitTest</h4><pre><code>- 配置\n</code></pre>\n"},{"title":"core-spotlight APP内搜索","date":"2021-08-23T03:33:47.000Z","_content":"\n\n**简介**\n通过iOS的spotlight~~下拉搜索~~基于关键字快速查找, 点击item后打开APP, 代码内也可以支持自动跳转到对应页面. 关键字可以自设, 增加APP的曝光率.\n<!-- more -->\n**现状**\n大部分的产品经理不懂iOS, 也不懂iPhone用户. 某些知名APP, 只做了itunes connect的下载搜索关键词覆盖, 竟然不做iOS特性分析...用户下载了以后就变成了一个僵尸APP放在手机里面, 然后被自动清理掉, 真的是太可惜了.\n**使用** [点我看效果](http://blog.loktar.com.cn/spotloght-search.mp4)\n- 此处用的是wwdc里面的swiftUI demo内的地标数据.\n- 目标1: 让用户在搜索地标名字的时候显示 icon, name和description. \n- 目标2: 用户点击对应的item, APP接受到对应的事件和信息, 基于需求完成后续操作.\n**主要代码**\n- 生成关键字索引和被搜索到后的显示内容:\n```\nlet itemAttributeSet: CSSearchableItemAttributeSet!\nif #available(iOS 14.0, *) {\n    itemAttributeSet = CSSearchableItemAttributeSet(contentType: .text)\n} else {\n    itemAttributeSet = CSSearchableItemAttributeSet(itemContentType: \"text\")\n}\nitemAttributeSet.identifier = \"landmark_\\(mark.id)\"\nitemAttributeSet.keywords = [mark.name, \"landmark\", \"旅游\", mark.park]\nitemAttributeSet.title = mark.name\nitemAttributeSet.contentDescription = mark.description\n```\n- 生成索引item\n`CSSearchableItem(uniqueIdentifier: \"com.hi.cage.CoreSpotlightDemo_\\(mark.id)\", domainIdentifier: \"landmark\", attributeSet: itemAttributeSet)`\n    注意此处的 uniqueIdentifier, 需要 `唯一`\n- 建立索引:\n```\nCSSearchableIndex.default().indexSearchableItems(items) { error in\n    if let errMessage = error?.localizedDescription {\n        debugPrint(errMessage)\n    }\n}\n```\n    items是一个数组, 所以我们一次可以建立`多个`索引.\n- 接收用户在spotloght的点击事件\n```\nfunc application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool {\n    if (userActivity.activityType == CSSearchableItemActionType) {\n        let id = userActivity.userInfo?[CSSearchableItemActivityIdentifier]\n        debugPrint(\"userActivity id = \\(id)\")\n        /// ...\n    }\n    return true\n}\n```\n- 移除索引\n```\nCSSearchableIndex.default().deleteSearchableItems(withIdentifiers: [\"com.hi.cage.CoreSpotlightDemo_\\(mark.id)\"]) { error in\n    if let errMessage = error?.localizedDescription {\n        debugPrint(errMessage)\n    } else {\n        debugPrint(\"deleteSearchableItems(withIdentifiers:) success\")\n    }\n}\n```\n也可以基于 demain 删除\n`/// CSSearchableIndex.default().deleteSearchableItems(withDomainIdentifiers: <#T##[String]#>, completionHandler: <#T##((Error?) -> Void)?##((Error?) -> Void)?##(Error?) -> Void#>)`\n**结束**\n功能很简单, 但是很实用, 接入 spotlight以后, APP活跃度可以有很明显的提升.\n已经上传[gitthub](https://github.com/aioser/CoreSpotlightDemo.git), enjoy~","source":"_posts/core-spotlight.md","raw":"---\ntitle: core-spotlight APP内搜索\ntags:\n  - spotlight\n  - iOS\n  - 搜索\ndate: 2021-08-23 11:33:47\n---\n\n\n**简介**\n通过iOS的spotlight~~下拉搜索~~基于关键字快速查找, 点击item后打开APP, 代码内也可以支持自动跳转到对应页面. 关键字可以自设, 增加APP的曝光率.\n<!-- more -->\n**现状**\n大部分的产品经理不懂iOS, 也不懂iPhone用户. 某些知名APP, 只做了itunes connect的下载搜索关键词覆盖, 竟然不做iOS特性分析...用户下载了以后就变成了一个僵尸APP放在手机里面, 然后被自动清理掉, 真的是太可惜了.\n**使用** [点我看效果](http://blog.loktar.com.cn/spotloght-search.mp4)\n- 此处用的是wwdc里面的swiftUI demo内的地标数据.\n- 目标1: 让用户在搜索地标名字的时候显示 icon, name和description. \n- 目标2: 用户点击对应的item, APP接受到对应的事件和信息, 基于需求完成后续操作.\n**主要代码**\n- 生成关键字索引和被搜索到后的显示内容:\n```\nlet itemAttributeSet: CSSearchableItemAttributeSet!\nif #available(iOS 14.0, *) {\n    itemAttributeSet = CSSearchableItemAttributeSet(contentType: .text)\n} else {\n    itemAttributeSet = CSSearchableItemAttributeSet(itemContentType: \"text\")\n}\nitemAttributeSet.identifier = \"landmark_\\(mark.id)\"\nitemAttributeSet.keywords = [mark.name, \"landmark\", \"旅游\", mark.park]\nitemAttributeSet.title = mark.name\nitemAttributeSet.contentDescription = mark.description\n```\n- 生成索引item\n`CSSearchableItem(uniqueIdentifier: \"com.hi.cage.CoreSpotlightDemo_\\(mark.id)\", domainIdentifier: \"landmark\", attributeSet: itemAttributeSet)`\n    注意此处的 uniqueIdentifier, 需要 `唯一`\n- 建立索引:\n```\nCSSearchableIndex.default().indexSearchableItems(items) { error in\n    if let errMessage = error?.localizedDescription {\n        debugPrint(errMessage)\n    }\n}\n```\n    items是一个数组, 所以我们一次可以建立`多个`索引.\n- 接收用户在spotloght的点击事件\n```\nfunc application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool {\n    if (userActivity.activityType == CSSearchableItemActionType) {\n        let id = userActivity.userInfo?[CSSearchableItemActivityIdentifier]\n        debugPrint(\"userActivity id = \\(id)\")\n        /// ...\n    }\n    return true\n}\n```\n- 移除索引\n```\nCSSearchableIndex.default().deleteSearchableItems(withIdentifiers: [\"com.hi.cage.CoreSpotlightDemo_\\(mark.id)\"]) { error in\n    if let errMessage = error?.localizedDescription {\n        debugPrint(errMessage)\n    } else {\n        debugPrint(\"deleteSearchableItems(withIdentifiers:) success\")\n    }\n}\n```\n也可以基于 demain 删除\n`/// CSSearchableIndex.default().deleteSearchableItems(withDomainIdentifiers: <#T##[String]#>, completionHandler: <#T##((Error?) -> Void)?##((Error?) -> Void)?##(Error?) -> Void#>)`\n**结束**\n功能很简单, 但是很实用, 接入 spotlight以后, APP活跃度可以有很明显的提升.\n已经上传[gitthub](https://github.com/aioser/CoreSpotlightDemo.git), enjoy~","slug":"core-spotlight","published":1,"updated":"2021-08-23T05:46:18.416Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckszt8srd0006rcp856zwd95b","content":"<p><strong>简介</strong><br>通过iOS的spotlight<del>下拉搜索</del>基于关键字快速查找, 点击item后打开APP, 代码内也可以支持自动跳转到对应页面. 关键字可以自设, 增加APP的曝光率.</p>\n<span id=\"more\"></span>\n<p><strong>现状</strong><br>大部分的产品经理不懂iOS, 也不懂iPhone用户. 某些知名APP, 只做了itunes connect的下载搜索关键词覆盖, 竟然不做iOS特性分析…用户下载了以后就变成了一个僵尸APP放在手机里面, 然后被自动清理掉, 真的是太可惜了.<br><strong>使用</strong> <a href=\"http://blog.loktar.com.cn/spotloght-search.mp4\">点我看效果</a></p>\n<ul>\n<li>此处用的是wwdc里面的swiftUI demo内的地标数据.</li>\n<li>目标1: 让用户在搜索地标名字的时候显示 icon, name和description. </li>\n<li>目标2: 用户点击对应的item, APP接受到对应的事件和信息, 基于需求完成后续操作.</li>\n</ul>\n<p><strong>主要代码</strong></p>\n<ul>\n<li>生成关键字索引和被搜索到后的显示内容:<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let itemAttributeSet: CSSearchableItemAttributeSet!</span><br><span class=\"line\">if #available(iOS 14.0, *) &#123;</span><br><span class=\"line\">    itemAttributeSet = CSSearchableItemAttributeSet(contentType: .text)</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    itemAttributeSet = CSSearchableItemAttributeSet(itemContentType: &quot;text&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">itemAttributeSet.identifier = &quot;landmark_\\(mark.id)&quot;</span><br><span class=\"line\">itemAttributeSet.keywords = [mark.name, &quot;landmark&quot;, &quot;旅游&quot;, mark.park]</span><br><span class=\"line\">itemAttributeSet.title = mark.name</span><br><span class=\"line\">itemAttributeSet.contentDescription = mark.description</span><br></pre></td></tr></table></figure></li>\n<li>生成索引item<br><code>CSSearchableItem(uniqueIdentifier: &quot;com.hi.cage.CoreSpotlightDemo_\\(mark.id)&quot;, domainIdentifier: &quot;landmark&quot;, attributeSet: itemAttributeSet)</code><br>  注意此处的 uniqueIdentifier, 需要 <code>唯一</code></li>\n<li>建立索引:<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CSSearchableIndex.default().indexSearchableItems(items) &#123; error in</span><br><span class=\"line\">    if let errMessage = error?.localizedDescription &#123;</span><br><span class=\"line\">        debugPrint(errMessage)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n  items是一个数组, 所以我们一次可以建立<code>多个</code>索引.</li>\n<li>接收用户在spotloght的点击事件<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -&gt; Void) -&gt; Bool &#123;</span><br><span class=\"line\">    if (userActivity.activityType == CSSearchableItemActionType) &#123;</span><br><span class=\"line\">        let id = userActivity.userInfo?[CSSearchableItemActivityIdentifier]</span><br><span class=\"line\">        debugPrint(&quot;userActivity id = \\(id)&quot;)</span><br><span class=\"line\">        /// ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>移除索引<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CSSearchableIndex.default().deleteSearchableItems(withIdentifiers: [&quot;com.hi.cage.CoreSpotlightDemo_\\(mark.id)&quot;]) &#123; error in</span><br><span class=\"line\">    if let errMessage = error?.localizedDescription &#123;</span><br><span class=\"line\">        debugPrint(errMessage)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        debugPrint(&quot;deleteSearchableItems(withIdentifiers:) success&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n也可以基于 demain 删除<br><code>/// CSSearchableIndex.default().deleteSearchableItems(withDomainIdentifiers: &lt;#T##[String]#&gt;, completionHandler: &lt;#T##((Error?) -&gt; Void)?##((Error?) -&gt; Void)?##(Error?) -&gt; Void#&gt;)</code></li>\n</ul>\n<p><strong>结束</strong><br>功能很简单, 但是很实用, 接入 spotlight以后, APP活跃度可以有很明显的提升.<br>已经上传<a href=\"https://github.com/aioser/CoreSpotlightDemo.git\">gitthub</a>, enjoy~</p>\n","site":{"data":{}},"length":2161,"excerpt":"<p><strong>简介</strong><br>通过iOS的spotlight<del>下拉搜索</del>基于关键字快速查找, 点击item后打开APP, 代码内也可以支持自动跳转到对应页面. 关键字可以自设, 增加APP的曝光率.</p>","more":"<p><strong>现状</strong><br>大部分的产品经理不懂iOS, 也不懂iPhone用户. 某些知名APP, 只做了itunes connect的下载搜索关键词覆盖, 竟然不做iOS特性分析…用户下载了以后就变成了一个僵尸APP放在手机里面, 然后被自动清理掉, 真的是太可惜了.<br><strong>使用</strong> <a href=\"http://blog.loktar.com.cn/spotloght-search.mp4\">点我看效果</a></p>\n<ul>\n<li>此处用的是wwdc里面的swiftUI demo内的地标数据.</li>\n<li>目标1: 让用户在搜索地标名字的时候显示 icon, name和description. </li>\n<li>目标2: 用户点击对应的item, APP接受到对应的事件和信息, 基于需求完成后续操作.</li>\n</ul>\n<p><strong>主要代码</strong></p>\n<ul>\n<li>生成关键字索引和被搜索到后的显示内容:<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let itemAttributeSet: CSSearchableItemAttributeSet!</span><br><span class=\"line\">if #available(iOS 14.0, *) &#123;</span><br><span class=\"line\">    itemAttributeSet = CSSearchableItemAttributeSet(contentType: .text)</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    itemAttributeSet = CSSearchableItemAttributeSet(itemContentType: &quot;text&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">itemAttributeSet.identifier = &quot;landmark_\\(mark.id)&quot;</span><br><span class=\"line\">itemAttributeSet.keywords = [mark.name, &quot;landmark&quot;, &quot;旅游&quot;, mark.park]</span><br><span class=\"line\">itemAttributeSet.title = mark.name</span><br><span class=\"line\">itemAttributeSet.contentDescription = mark.description</span><br></pre></td></tr></table></figure></li>\n<li>生成索引item<br><code>CSSearchableItem(uniqueIdentifier: &quot;com.hi.cage.CoreSpotlightDemo_\\(mark.id)&quot;, domainIdentifier: &quot;landmark&quot;, attributeSet: itemAttributeSet)</code><br>  注意此处的 uniqueIdentifier, 需要 <code>唯一</code></li>\n<li>建立索引:<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CSSearchableIndex.default().indexSearchableItems(items) &#123; error in</span><br><span class=\"line\">    if let errMessage = error?.localizedDescription &#123;</span><br><span class=\"line\">        debugPrint(errMessage)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n  items是一个数组, 所以我们一次可以建立<code>多个</code>索引.</li>\n<li>接收用户在spotloght的点击事件<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -&gt; Void) -&gt; Bool &#123;</span><br><span class=\"line\">    if (userActivity.activityType == CSSearchableItemActionType) &#123;</span><br><span class=\"line\">        let id = userActivity.userInfo?[CSSearchableItemActivityIdentifier]</span><br><span class=\"line\">        debugPrint(&quot;userActivity id = \\(id)&quot;)</span><br><span class=\"line\">        /// ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>移除索引<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CSSearchableIndex.default().deleteSearchableItems(withIdentifiers: [&quot;com.hi.cage.CoreSpotlightDemo_\\(mark.id)&quot;]) &#123; error in</span><br><span class=\"line\">    if let errMessage = error?.localizedDescription &#123;</span><br><span class=\"line\">        debugPrint(errMessage)</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        debugPrint(&quot;deleteSearchableItems(withIdentifiers:) success&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n也可以基于 demain 删除<br><code>/// CSSearchableIndex.default().deleteSearchableItems(withDomainIdentifiers: &lt;#T##[String]#&gt;, completionHandler: &lt;#T##((Error?) -&gt; Void)?##((Error?) -&gt; Void)?##(Error?) -&gt; Void#&gt;)</code></li>\n</ul>\n<p><strong>结束</strong><br>功能很简单, 但是很实用, 接入 spotlight以后, APP活跃度可以有很明显的提升.<br>已经上传<a href=\"https://github.com/aioser/CoreSpotlightDemo.git\">gitthub</a>, enjoy~</p>"},{"title":"Hexo搭建遇到的问题","_content":"\n- ### zsh: command not found: hexo \n    `$ echo \\ export PATH=~/.npm-global/bin:\\$PATH >> ~/.zshrc`\n    `$ source ~/.zshrc`\n- ### 更换主题造成的乱码\n    - 原因: hexo在5.0之后把swig给删除了\n    - 解决: 项目内 `$ npm i hexo-renderer-swig`\n    - 重编一下项目即可(CI的情况下直接提交代码)\n<!-- more -->\n- ### 自定义配置时候.yml文件被覆盖问题\n    - 原因: 因为我们的`NexT`主题是使用`npm`加载的, 所以资源都是统一被放在`node_modules`内, 如果做自定义配置而修改了内部文件的话, 在下次`$ npm install`的时候就会被覆盖.\n    - 解决: `$ cp node_modules/hexo-theme-[theme name]/_config.yml _config.[theme name].yml`. `[theme name]` 需要替换成自己所用的主题名字, 比如`next`.\n    - 在新拷贝出来的文件内做修改, `hexo`会自动选择.\n- ### 文章字数统计\n    - 安装: `$ npm install hexo-symbols-count-time --save`\n    - `_config.yml`设置:\n```\nsymbols_count_time: \n    symbols: true # 文章字数统计  \n    time: true # 文章阅读时长  \n    total_symbols: true # 站点总字数统计  \n    total_time: false # 站点总阅读时长  \n    exclude_codeblock: false # 排除代码字数统计\n```\n    - 可选: `_config.yml`中`language`设置为`zh_CN`\n- ### `NexT`主题配置 `_config.next.yml`\n    - 代码块: `codeblock`字段下按需配置.\n        - 先[体验](https://theme-next.js.org/highlight/), 后选择.\n        - 🤔, 一玩一天\n    - favicon: `favicon` 字段下设置. 对应文件拖入项目内, 配置好路径即可~.\n        - 推荐一个[工具网站](https://realfavicongenerator.net)\n    - 菜单配置: `menu` 字段下, 可以配置对应的标题和icon. 使用`$ hexo new page [name]`就可以生成对应的模版, `name`和`menu`下的配置匹配到就可以啦. \n        - `icon` 可以在[这里](https://fontawesome.com)找到.\n        - easy~\n        - <bold>注意</bold>: 设置`tags`, `NexT`会自动匹配`page`, 只需要给`tag page`下的`index.md`中的`type`设置为`tags`即可.\n        ```\n        ---\n        title: tags\n        date: 2021-08-03 13:44:18\n        type: tags\n        tags: [技术, iOS]\n        ---\n        ```\n    - 设置头像: `avatar`字段下, 配置文件地址. \n        - `rounded:` 支持自动切圆角.\n        - 支持`gif`\n- ### 想要阅读更多按钮?\n    在你觉得合适多位置键入一个 `<!-- more -->` 吧\n\n- ### 设置自定义域名\n    - 先去申请一个域名吧, 比如 `loktar.com.cn` [阿里云](https://wanwang.aliyun.com/?spm=5176.19720258.J_8058803260.55.c9a82c4aVT0pTf), 便宜的一年几块钱.\n    - `hexo` 项目内创建一个 `CNAME` 文件, 文件内输入 `loktar.com.cn`, 二级域名也可以, 随你喜欢. 提交修改 `$ git add .; git commit -m \"message\"; git push origin master`;\n    - `github` 对应的 `blog` 项目内, 打开 `settings` 下的 `pages`, 找到 `Custom domain`, 输入 `loktar.com.cn`, 然后 `save`.\n    - 打开终端, `$ ping [user name].github.io`, 找到对应 `ip`, `copy` 下来\n    - 打开阿里云[阿里云](https://wanwang.aliyun.com/?spm=5176.19720258.J_8058803260.55.c9a82c4aVT0pTf)`控制台`, 找到`域名`, `解析`, `添加记录`, `记录类型` 选择 `cname`, `主机记录` 输入 `www`, `记录值`输入上一步获取的 `IP`. `确认`\n    - 重复上一步, `主机记录`不输入内容. `确认`\n    - 打开浏览器, 键入 `loktar.com.cn`, 就可以看到你的博客了~. \n    - 感谢 `github`. \n    \n\n\n    \n\n\n    \n \n\n","source":"_posts/hexo.md","raw":"---\ntitle: Hexo搭建遇到的问题\ncategories: [技术, Hexo, Next]\ntags: [技术, Hexo, Next]\n---\n\n- ### zsh: command not found: hexo \n    `$ echo \\ export PATH=~/.npm-global/bin:\\$PATH >> ~/.zshrc`\n    `$ source ~/.zshrc`\n- ### 更换主题造成的乱码\n    - 原因: hexo在5.0之后把swig给删除了\n    - 解决: 项目内 `$ npm i hexo-renderer-swig`\n    - 重编一下项目即可(CI的情况下直接提交代码)\n<!-- more -->\n- ### 自定义配置时候.yml文件被覆盖问题\n    - 原因: 因为我们的`NexT`主题是使用`npm`加载的, 所以资源都是统一被放在`node_modules`内, 如果做自定义配置而修改了内部文件的话, 在下次`$ npm install`的时候就会被覆盖.\n    - 解决: `$ cp node_modules/hexo-theme-[theme name]/_config.yml _config.[theme name].yml`. `[theme name]` 需要替换成自己所用的主题名字, 比如`next`.\n    - 在新拷贝出来的文件内做修改, `hexo`会自动选择.\n- ### 文章字数统计\n    - 安装: `$ npm install hexo-symbols-count-time --save`\n    - `_config.yml`设置:\n```\nsymbols_count_time: \n    symbols: true # 文章字数统计  \n    time: true # 文章阅读时长  \n    total_symbols: true # 站点总字数统计  \n    total_time: false # 站点总阅读时长  \n    exclude_codeblock: false # 排除代码字数统计\n```\n    - 可选: `_config.yml`中`language`设置为`zh_CN`\n- ### `NexT`主题配置 `_config.next.yml`\n    - 代码块: `codeblock`字段下按需配置.\n        - 先[体验](https://theme-next.js.org/highlight/), 后选择.\n        - 🤔, 一玩一天\n    - favicon: `favicon` 字段下设置. 对应文件拖入项目内, 配置好路径即可~.\n        - 推荐一个[工具网站](https://realfavicongenerator.net)\n    - 菜单配置: `menu` 字段下, 可以配置对应的标题和icon. 使用`$ hexo new page [name]`就可以生成对应的模版, `name`和`menu`下的配置匹配到就可以啦. \n        - `icon` 可以在[这里](https://fontawesome.com)找到.\n        - easy~\n        - <bold>注意</bold>: 设置`tags`, `NexT`会自动匹配`page`, 只需要给`tag page`下的`index.md`中的`type`设置为`tags`即可.\n        ```\n        ---\n        title: tags\n        date: 2021-08-03 13:44:18\n        type: tags\n        tags: [技术, iOS]\n        ---\n        ```\n    - 设置头像: `avatar`字段下, 配置文件地址. \n        - `rounded:` 支持自动切圆角.\n        - 支持`gif`\n- ### 想要阅读更多按钮?\n    在你觉得合适多位置键入一个 `<!-- more -->` 吧\n\n- ### 设置自定义域名\n    - 先去申请一个域名吧, 比如 `loktar.com.cn` [阿里云](https://wanwang.aliyun.com/?spm=5176.19720258.J_8058803260.55.c9a82c4aVT0pTf), 便宜的一年几块钱.\n    - `hexo` 项目内创建一个 `CNAME` 文件, 文件内输入 `loktar.com.cn`, 二级域名也可以, 随你喜欢. 提交修改 `$ git add .; git commit -m \"message\"; git push origin master`;\n    - `github` 对应的 `blog` 项目内, 打开 `settings` 下的 `pages`, 找到 `Custom domain`, 输入 `loktar.com.cn`, 然后 `save`.\n    - 打开终端, `$ ping [user name].github.io`, 找到对应 `ip`, `copy` 下来\n    - 打开阿里云[阿里云](https://wanwang.aliyun.com/?spm=5176.19720258.J_8058803260.55.c9a82c4aVT0pTf)`控制台`, 找到`域名`, `解析`, `添加记录`, `记录类型` 选择 `cname`, `主机记录` 输入 `www`, `记录值`输入上一步获取的 `IP`. `确认`\n    - 重复上一步, `主机记录`不输入内容. `确认`\n    - 打开浏览器, 键入 `loktar.com.cn`, 就可以看到你的博客了~. \n    - 感谢 `github`. \n    \n\n\n    \n\n\n    \n \n\n","slug":"hexo","published":1,"date":"2021-07-30T07:38:21.169Z","updated":"2021-08-18T03:52:34.952Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckszt8sre0007rcp8cf247ibd","content":"<ul>\n<li><h3 id=\"zsh-command-not-found-hexo\"><a href=\"#zsh-command-not-found-hexo\" class=\"headerlink\" title=\"zsh: command not found: hexo\"></a>zsh: command not found: hexo</h3><p>  <code>$ echo \\ export PATH=~/.npm-global/bin:\\$PATH &gt;&gt; ~/.zshrc</code><br>  <code>$ source ~/.zshrc</code></p>\n</li>\n<li><h3 id=\"更换主题造成的乱码\"><a href=\"#更换主题造成的乱码\" class=\"headerlink\" title=\"更换主题造成的乱码\"></a>更换主题造成的乱码</h3><ul>\n<li>原因: hexo在5.0之后把swig给删除了</li>\n<li>解决: 项目内 <code>$ npm i hexo-renderer-swig</code></li>\n<li>重编一下项目即可(CI的情况下直接提交代码)<span id=\"more\"></span></li>\n</ul>\n</li>\n<li><h3 id=\"自定义配置时候-yml文件被覆盖问题\"><a href=\"#自定义配置时候-yml文件被覆盖问题\" class=\"headerlink\" title=\"自定义配置时候.yml文件被覆盖问题\"></a>自定义配置时候.yml文件被覆盖问题</h3><ul>\n<li>原因: 因为我们的<code>NexT</code>主题是使用<code>npm</code>加载的, 所以资源都是统一被放在<code>node_modules</code>内, 如果做自定义配置而修改了内部文件的话, 在下次<code>$ npm install</code>的时候就会被覆盖.</li>\n<li>解决: <code>$ cp node_modules/hexo-theme-[theme name]/_config.yml _config.[theme name].yml</code>. <code>[theme name]</code> 需要替换成自己所用的主题名字, 比如<code>next</code>.</li>\n<li>在新拷贝出来的文件内做修改, <code>hexo</code>会自动选择.</li>\n</ul>\n</li>\n<li><h3 id=\"文章字数统计\"><a href=\"#文章字数统计\" class=\"headerlink\" title=\"文章字数统计\"></a>文章字数统计</h3><ul>\n<li>安装: <code>$ npm install hexo-symbols-count-time --save</code></li>\n<li><code>_config.yml</code>设置:<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">symbols_count_time: </span><br><span class=\"line\">    symbols: true # 文章字数统计  </span><br><span class=\"line\">    time: true # 文章阅读时长  </span><br><span class=\"line\">    total_symbols: true # 站点总字数统计  </span><br><span class=\"line\">    total_time: false # 站点总阅读时长  </span><br><span class=\"line\">    exclude_codeblock: false # 排除代码字数统计</span><br></pre></td></tr></table></figure></li>\n<li>可选: <code>_config.yml</code>中<code>language</code>设置为<code>zh_CN</code></li>\n</ul>\n</li>\n<li><h3 id=\"NexT主题配置-config-next-yml\"><a href=\"#NexT主题配置-config-next-yml\" class=\"headerlink\" title=\"NexT主题配置 _config.next.yml\"></a><code>NexT</code>主题配置 <code>_config.next.yml</code></h3><ul>\n<li>代码块: <code>codeblock</code>字段下按需配置.<ul>\n<li>先<a href=\"https://theme-next.js.org/highlight/\">体验</a>, 后选择.</li>\n<li>🤔, 一玩一天</li>\n</ul>\n</li>\n<li>favicon: <code>favicon</code> 字段下设置. 对应文件拖入项目内, 配置好路径即可~.<ul>\n<li>推荐一个<a href=\"https://realfavicongenerator.net/\">工具网站</a></li>\n</ul>\n</li>\n<li>菜单配置: <code>menu</code> 字段下, 可以配置对应的标题和icon. 使用<code>$ hexo new page [name]</code>就可以生成对应的模版, <code>name</code>和<code>menu</code>下的配置匹配到就可以啦. <ul>\n<li><code>icon</code> 可以在<a href=\"https://fontawesome.com/\">这里</a>找到.</li>\n<li>easy~</li>\n<li><bold>注意</bold>: 设置<code>tags</code>, <code>NexT</code>会自动匹配<code>page</code>, 只需要给<code>tag page</code>下的<code>index.md</code>中的<code>type</code>设置为<code>tags</code>即可.<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: tags</span><br><span class=\"line\">date: 2021-08-03 13:44:18</span><br><span class=\"line\">type: tags</span><br><span class=\"line\">tags: [技术, iOS]</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>设置头像: <code>avatar</code>字段下, 配置文件地址. <ul>\n<li><code>rounded:</code> 支持自动切圆角.</li>\n<li>支持<code>gif</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"想要阅读更多按钮\"><a href=\"#想要阅读更多按钮\" class=\"headerlink\" title=\"想要阅读更多按钮?\"></a>想要阅读更多按钮?</h3><p>  在你觉得合适多位置键入一个 <code>&lt;!-- more --&gt;</code> 吧</p>\n</li>\n<li><h3 id=\"设置自定义域名\"><a href=\"#设置自定义域名\" class=\"headerlink\" title=\"设置自定义域名\"></a>设置自定义域名</h3><ul>\n<li>先去申请一个域名吧, 比如 <code>loktar.com.cn</code> <a href=\"https://wanwang.aliyun.com/?spm=5176.19720258.J_8058803260.55.c9a82c4aVT0pTf\">阿里云</a>, 便宜的一年几块钱.</li>\n<li><code>hexo</code> 项目内创建一个 <code>CNAME</code> 文件, 文件内输入 <code>loktar.com.cn</code>, 二级域名也可以, 随你喜欢. 提交修改 <code>$ git add .; git commit -m &quot;message&quot;; git push origin master</code>;</li>\n<li><code>github</code> 对应的 <code>blog</code> 项目内, 打开 <code>settings</code> 下的 <code>pages</code>, 找到 <code>Custom domain</code>, 输入 <code>loktar.com.cn</code>, 然后 <code>save</code>.</li>\n<li>打开终端, <code>$ ping [user name].github.io</code>, 找到对应 <code>ip</code>, <code>copy</code> 下来</li>\n<li>打开阿里云<a href=\"https://wanwang.aliyun.com/?spm=5176.19720258.J_8058803260.55.c9a82c4aVT0pTf\">阿里云</a><code>控制台</code>, 找到<code>域名</code>, <code>解析</code>, <code>添加记录</code>, <code>记录类型</code> 选择 <code>cname</code>, <code>主机记录</code> 输入 <code>www</code>, <code>记录值</code>输入上一步获取的 <code>IP</code>. <code>确认</code></li>\n<li>重复上一步, <code>主机记录</code>不输入内容. <code>确认</code></li>\n<li>打开浏览器, 键入 <code>loktar.com.cn</code>, 就可以看到你的博客了~. </li>\n<li>感谢 <code>github</code>. </li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"length":1474,"excerpt":"<ul>\n<li><h3 id=\"zsh-command-not-found-hexo\"><a href=\"#zsh-command-not-found-hexo\" class=\"headerlink\" title=\"zsh: command not found: hexo\"></a>zsh: command not found: hexo</h3><p>  <code>$ echo \\ export PATH=~/.npm-global/bin:\\$PATH &gt;&gt; ~/.zshrc</code><br>  <code>$ source ~/.zshrc</code></p>\n</li>\n<li><h3 id=\"更换主题造成的乱码\"><a href=\"#更换主题造成的乱码\" class=\"headerlink\" title=\"更换主题造成的乱码\"></a>更换主题造成的乱码</h3><ul>\n<li>原因: hexo在5.0之后把swig给删除了</li>\n<li>解决: 项目内 <code>$ npm i hexo-renderer-swig</code></li>\n<li>重编一下项目即可(CI的情况下直接提交代码)","more":"</li>\n</ul>\n</li>\n<li><h3 id=\"自定义配置时候-yml文件被覆盖问题\"><a href=\"#自定义配置时候-yml文件被覆盖问题\" class=\"headerlink\" title=\"自定义配置时候.yml文件被覆盖问题\"></a>自定义配置时候.yml文件被覆盖问题</h3><ul>\n<li>原因: 因为我们的<code>NexT</code>主题是使用<code>npm</code>加载的, 所以资源都是统一被放在<code>node_modules</code>内, 如果做自定义配置而修改了内部文件的话, 在下次<code>$ npm install</code>的时候就会被覆盖.</li>\n<li>解决: <code>$ cp node_modules/hexo-theme-[theme name]/_config.yml _config.[theme name].yml</code>. <code>[theme name]</code> 需要替换成自己所用的主题名字, 比如<code>next</code>.</li>\n<li>在新拷贝出来的文件内做修改, <code>hexo</code>会自动选择.</li>\n</ul>\n</li>\n<li><h3 id=\"文章字数统计\"><a href=\"#文章字数统计\" class=\"headerlink\" title=\"文章字数统计\"></a>文章字数统计</h3><ul>\n<li>安装: <code>$ npm install hexo-symbols-count-time --save</code></li>\n<li><code>_config.yml</code>设置:<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">symbols_count_time: </span><br><span class=\"line\">    symbols: true # 文章字数统计  </span><br><span class=\"line\">    time: true # 文章阅读时长  </span><br><span class=\"line\">    total_symbols: true # 站点总字数统计  </span><br><span class=\"line\">    total_time: false # 站点总阅读时长  </span><br><span class=\"line\">    exclude_codeblock: false # 排除代码字数统计</span><br></pre></td></tr></table></figure></li>\n<li>可选: <code>_config.yml</code>中<code>language</code>设置为<code>zh_CN</code></li>\n</ul>\n</li>\n<li><h3 id=\"NexT主题配置-config-next-yml\"><a href=\"#NexT主题配置-config-next-yml\" class=\"headerlink\" title=\"NexT主题配置 _config.next.yml\"></a><code>NexT</code>主题配置 <code>_config.next.yml</code></h3><ul>\n<li>代码块: <code>codeblock</code>字段下按需配置.<ul>\n<li>先<a href=\"https://theme-next.js.org/highlight/\">体验</a>, 后选择.</li>\n<li>🤔, 一玩一天</li>\n</ul>\n</li>\n<li>favicon: <code>favicon</code> 字段下设置. 对应文件拖入项目内, 配置好路径即可~.<ul>\n<li>推荐一个<a href=\"https://realfavicongenerator.net/\">工具网站</a></li>\n</ul>\n</li>\n<li>菜单配置: <code>menu</code> 字段下, 可以配置对应的标题和icon. 使用<code>$ hexo new page [name]</code>就可以生成对应的模版, <code>name</code>和<code>menu</code>下的配置匹配到就可以啦. <ul>\n<li><code>icon</code> 可以在<a href=\"https://fontawesome.com/\">这里</a>找到.</li>\n<li>easy~</li>\n<li><bold>注意</bold>: 设置<code>tags</code>, <code>NexT</code>会自动匹配<code>page</code>, 只需要给<code>tag page</code>下的<code>index.md</code>中的<code>type</code>设置为<code>tags</code>即可.<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: tags</span><br><span class=\"line\">date: 2021-08-03 13:44:18</span><br><span class=\"line\">type: tags</span><br><span class=\"line\">tags: [技术, iOS]</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>设置头像: <code>avatar</code>字段下, 配置文件地址. <ul>\n<li><code>rounded:</code> 支持自动切圆角.</li>\n<li>支持<code>gif</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"想要阅读更多按钮\"><a href=\"#想要阅读更多按钮\" class=\"headerlink\" title=\"想要阅读更多按钮?\"></a>想要阅读更多按钮?</h3><p>  在你觉得合适多位置键入一个 <code>&lt;!-- more --&gt;</code> 吧</p>\n</li>\n<li><h3 id=\"设置自定义域名\"><a href=\"#设置自定义域名\" class=\"headerlink\" title=\"设置自定义域名\"></a>设置自定义域名</h3><ul>\n<li>先去申请一个域名吧, 比如 <code>loktar.com.cn</code> <a href=\"https://wanwang.aliyun.com/?spm=5176.19720258.J_8058803260.55.c9a82c4aVT0pTf\">阿里云</a>, 便宜的一年几块钱.</li>\n<li><code>hexo</code> 项目内创建一个 <code>CNAME</code> 文件, 文件内输入 <code>loktar.com.cn</code>, 二级域名也可以, 随你喜欢. 提交修改 <code>$ git add .; git commit -m &quot;message&quot;; git push origin master</code>;</li>\n<li><code>github</code> 对应的 <code>blog</code> 项目内, 打开 <code>settings</code> 下的 <code>pages</code>, 找到 <code>Custom domain</code>, 输入 <code>loktar.com.cn</code>, 然后 <code>save</code>.</li>\n<li>打开终端, <code>$ ping [user name].github.io</code>, 找到对应 <code>ip</code>, <code>copy</code> 下来</li>\n<li>打开阿里云<a href=\"https://wanwang.aliyun.com/?spm=5176.19720258.J_8058803260.55.c9a82c4aVT0pTf\">阿里云</a><code>控制台</code>, 找到<code>域名</code>, <code>解析</code>, <code>添加记录</code>, <code>记录类型</code> 选择 <code>cname</code>, <code>主机记录</code> 输入 <code>www</code>, <code>记录值</code>输入上一步获取的 <code>IP</code>. <code>确认</code></li>\n<li>重复上一步, <code>主机记录</code>不输入内容. <code>确认</code></li>\n<li>打开浏览器, 键入 <code>loktar.com.cn</code>, 就可以看到你的博客了~. </li>\n<li>感谢 <code>github</code>. </li>\n</ul>\n</li>\n</ul>"},{"title":"iOS图片预览","date":"2021-08-18T03:32:25.000Z","_content":"\n\n**背景**\n    原先项目内的图片预览框架用的是一个魔改的某开源框架, 里面的代码又杂又乱, 各种乱拷贝代码. 这周公司的项目任务已经做完, 就决定给这个框架自己重写一下.\n<!-- more -->   \n\n**效果** [**点我去看效果**](http://blog.loktar.com.cn/image_preview.mp4)\n- 支持单图/多图点开按顺序预览\n- 支持单张放大/缩小\n- 支持从头部和尾部插入列表\n- 支持滑动回收预览\n- 图片可以是`GIF`\n- 支持将图片保存入系统相册\n    \n**实现**\n- 主体使用`UIScrollView`, 然后利用`UIScrollViewDelegate`的 `- scrollViewDidZoom:` 和 `- viewForZoomingInScrollView:`配合, 实现滚动、滑动和放大缩小功能.\n    - 此处需要注意的是: 层级结构为: `main UIScrollView` -> [`sub UIScrollView` -> `UIView` -> `SDAnimationImageView`], 不然在拖拽时候会出现显示异常\n    - 在 `sub UIScrollView` 的 `- scrollViewDidZoom:`中需要重设 `- viewForZoomingInScrollView: ` 的位置.\n    ```\n    CGFloat ratio = MIN(self.bounds.size.width / size.width, self.bounds.size.height / size.height);\n    CGFloat W = ratio * size.width;\n    CGFloat H = ratio * size.height;\n    CGRect imageFrame = CGRectMake((self.bounds.size.width - W) / 2, (self.bounds.size.height - H) / 2, W, H);\n    self.containerView.frame = imageFrame;\n    self.imageView.frame = CGRectMake(0, 0, imageFrame.size.width, imageFrame.size.height);\n    ```\n    - 给主体控件上添加`UITapGestureRecognizer`手势, 实现在拖拽的时候进行回收/重新布局. 主要的\n    ```\n    - (void)handlePanGestureRecognizer:(UIPanGestureRecognizer *)sender {\n        static LRSImagePreviewZoomingImageView *currentView = nil;\n        if (sender.state == UIGestureRecognizerStateBegan) {\n            /// 在手势开始的时候获取当前正在拖拽的自视图\n            currentView = ...;\n        }\n        if (currentView) {\n            if (sender.state == UIGestureRecognizerStateEnded) {\n                /// 重置\n                currentView = nil;\n            } else {\n                /// 拖拽动画\n                CGPoint p = [sender translationInView:self];\n                CGAffineTransform transform = CGAffineTransformMakeTranslation(p.x, p.y);\n                CGFloat value = 1 - (MAX(fabs(p.x), fabs(p.y))) / 1000;\n                transform = CGAffineTransformScale(transform, value, value);\n                currentView.transform = transform;\n            }\n        }\n    }\n    ```\n    - 因为还需要从图片点击位置出现/回收视图, 所以还需要记录弹出预览图的点击位置.\n    - 往头部插入数据的时候, 记得设置`Scroview`的偏移量\n    - 需要支持`GIF`, 所以我们引用了`SDWebImage`\n    - 图片保存系统相册, 我们使用了系统的`Photos`框架\n    ```\n    + (void)creationRequestWithData:(NSData *)data options:(nullable PHAssetResourceCreationOptions *)options completionHandler:(void (^)(BOOL, NSError * _Nullable))handler {\n        PHPhotoLibrary *library = [PHPhotoLibrary sharedPhotoLibrary];\n        [library performChanges:^{\n            [[PHAssetCreationRequest creationRequestForAsset] addResourceWithType:PHAssetResourceTypePhoto data:data options:options];\n        } completionHandler:handler];\n    }\n    ```\n\n**注意点**\n- 坐标换算\n    `CGRect rect = [A convertRect:B.frame fromView:B.supverView]`\n    得到的`rect`就是`B`相对于`A`的新坐标.\n\n**demo地址**\n    已经上传`github`, [enjoy](https://github.com/aioser/LRSImagePreview)\n\n","source":"_posts/image-preview.md","raw":"---\ntitle: iOS图片预览\ntags:\n  - iOS\n  - image preview\n  - Photos\ndate: 2021-08-18 11:32:25\n---\n\n\n**背景**\n    原先项目内的图片预览框架用的是一个魔改的某开源框架, 里面的代码又杂又乱, 各种乱拷贝代码. 这周公司的项目任务已经做完, 就决定给这个框架自己重写一下.\n<!-- more -->   \n\n**效果** [**点我去看效果**](http://blog.loktar.com.cn/image_preview.mp4)\n- 支持单图/多图点开按顺序预览\n- 支持单张放大/缩小\n- 支持从头部和尾部插入列表\n- 支持滑动回收预览\n- 图片可以是`GIF`\n- 支持将图片保存入系统相册\n    \n**实现**\n- 主体使用`UIScrollView`, 然后利用`UIScrollViewDelegate`的 `- scrollViewDidZoom:` 和 `- viewForZoomingInScrollView:`配合, 实现滚动、滑动和放大缩小功能.\n    - 此处需要注意的是: 层级结构为: `main UIScrollView` -> [`sub UIScrollView` -> `UIView` -> `SDAnimationImageView`], 不然在拖拽时候会出现显示异常\n    - 在 `sub UIScrollView` 的 `- scrollViewDidZoom:`中需要重设 `- viewForZoomingInScrollView: ` 的位置.\n    ```\n    CGFloat ratio = MIN(self.bounds.size.width / size.width, self.bounds.size.height / size.height);\n    CGFloat W = ratio * size.width;\n    CGFloat H = ratio * size.height;\n    CGRect imageFrame = CGRectMake((self.bounds.size.width - W) / 2, (self.bounds.size.height - H) / 2, W, H);\n    self.containerView.frame = imageFrame;\n    self.imageView.frame = CGRectMake(0, 0, imageFrame.size.width, imageFrame.size.height);\n    ```\n    - 给主体控件上添加`UITapGestureRecognizer`手势, 实现在拖拽的时候进行回收/重新布局. 主要的\n    ```\n    - (void)handlePanGestureRecognizer:(UIPanGestureRecognizer *)sender {\n        static LRSImagePreviewZoomingImageView *currentView = nil;\n        if (sender.state == UIGestureRecognizerStateBegan) {\n            /// 在手势开始的时候获取当前正在拖拽的自视图\n            currentView = ...;\n        }\n        if (currentView) {\n            if (sender.state == UIGestureRecognizerStateEnded) {\n                /// 重置\n                currentView = nil;\n            } else {\n                /// 拖拽动画\n                CGPoint p = [sender translationInView:self];\n                CGAffineTransform transform = CGAffineTransformMakeTranslation(p.x, p.y);\n                CGFloat value = 1 - (MAX(fabs(p.x), fabs(p.y))) / 1000;\n                transform = CGAffineTransformScale(transform, value, value);\n                currentView.transform = transform;\n            }\n        }\n    }\n    ```\n    - 因为还需要从图片点击位置出现/回收视图, 所以还需要记录弹出预览图的点击位置.\n    - 往头部插入数据的时候, 记得设置`Scroview`的偏移量\n    - 需要支持`GIF`, 所以我们引用了`SDWebImage`\n    - 图片保存系统相册, 我们使用了系统的`Photos`框架\n    ```\n    + (void)creationRequestWithData:(NSData *)data options:(nullable PHAssetResourceCreationOptions *)options completionHandler:(void (^)(BOOL, NSError * _Nullable))handler {\n        PHPhotoLibrary *library = [PHPhotoLibrary sharedPhotoLibrary];\n        [library performChanges:^{\n            [[PHAssetCreationRequest creationRequestForAsset] addResourceWithType:PHAssetResourceTypePhoto data:data options:options];\n        } completionHandler:handler];\n    }\n    ```\n\n**注意点**\n- 坐标换算\n    `CGRect rect = [A convertRect:B.frame fromView:B.supverView]`\n    得到的`rect`就是`B`相对于`A`的新坐标.\n\n**demo地址**\n    已经上传`github`, [enjoy](https://github.com/aioser/LRSImagePreview)\n\n","slug":"image-preview","published":1,"updated":"2021-08-20T08:40:14.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckszt8srf0008rcp81vr0h90x","content":"<p><strong>背景</strong><br>    原先项目内的图片预览框架用的是一个魔改的某开源框架, 里面的代码又杂又乱, 各种乱拷贝代码. 这周公司的项目任务已经做完, 就决定给这个框架自己重写一下.</p>\n<span id=\"more\"></span>   \n\n<p><strong>效果</strong> <a href=\"http://blog.loktar.com.cn/image_preview.mp4\"><strong>点我去看效果</strong></a></p>\n<ul>\n<li>支持单图/多图点开按顺序预览</li>\n<li>支持单张放大/缩小</li>\n<li>支持从头部和尾部插入列表</li>\n<li>支持滑动回收预览</li>\n<li>图片可以是<code>GIF</code></li>\n<li>支持将图片保存入系统相册</li>\n</ul>\n<p><strong>实现</strong></p>\n<ul>\n<li>主体使用<code>UIScrollView</code>, 然后利用<code>UIScrollViewDelegate</code>的 <code>- scrollViewDidZoom:</code> 和 <code>- viewForZoomingInScrollView:</code>配合, 实现滚动、滑动和放大缩小功能.<ul>\n<li>此处需要注意的是: 层级结构为: <code>main UIScrollView</code> -&gt; [<code>sub UIScrollView</code> -&gt; <code>UIView</code> -&gt; <code>SDAnimationImageView</code>], 不然在拖拽时候会出现显示异常</li>\n<li>在 <code>sub UIScrollView</code> 的 <code>- scrollViewDidZoom:</code>中需要重设 <code>- viewForZoomingInScrollView: </code> 的位置.<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CGFloat ratio = MIN(self.bounds.size.width / size.width, self.bounds.size.height / size.height);</span><br><span class=\"line\">CGFloat W = ratio * size.width;</span><br><span class=\"line\">CGFloat H = ratio * size.height;</span><br><span class=\"line\">CGRect imageFrame = CGRectMake((self.bounds.size.width - W) / 2, (self.bounds.size.height - H) / 2, W, H);</span><br><span class=\"line\">self.containerView.frame = imageFrame;</span><br><span class=\"line\">self.imageView.frame = CGRectMake(0, 0, imageFrame.size.width, imageFrame.size.height);</span><br></pre></td></tr></table></figure></li>\n<li>给主体控件上添加<code>UITapGestureRecognizer</code>手势, 实现在拖拽的时候进行回收/重新布局. 主要的<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)handlePanGestureRecognizer:(UIPanGestureRecognizer *)sender &#123;</span><br><span class=\"line\">    static LRSImagePreviewZoomingImageView *currentView = nil;</span><br><span class=\"line\">    if (sender.state == UIGestureRecognizerStateBegan) &#123;</span><br><span class=\"line\">        /// 在手势开始的时候获取当前正在拖拽的自视图</span><br><span class=\"line\">        currentView = ...;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (currentView) &#123;</span><br><span class=\"line\">        if (sender.state == UIGestureRecognizerStateEnded) &#123;</span><br><span class=\"line\">            /// 重置</span><br><span class=\"line\">            currentView = nil;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            /// 拖拽动画</span><br><span class=\"line\">            CGPoint p = [sender translationInView:self];</span><br><span class=\"line\">            CGAffineTransform transform = CGAffineTransformMakeTranslation(p.x, p.y);</span><br><span class=\"line\">            CGFloat value = 1 - (MAX(fabs(p.x), fabs(p.y))) / 1000;</span><br><span class=\"line\">            transform = CGAffineTransformScale(transform, value, value);</span><br><span class=\"line\">            currentView.transform = transform;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>因为还需要从图片点击位置出现/回收视图, 所以还需要记录弹出预览图的点击位置.</li>\n<li>往头部插入数据的时候, 记得设置<code>Scroview</code>的偏移量</li>\n<li>需要支持<code>GIF</code>, 所以我们引用了<code>SDWebImage</code></li>\n<li>图片保存系统相册, 我们使用了系统的<code>Photos</code>框架<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (void)creationRequestWithData:(NSData *)data options:(nullable PHAssetResourceCreationOptions *)options completionHandler:(void (^)(BOOL, NSError * _Nullable))handler &#123;</span><br><span class=\"line\">    PHPhotoLibrary *library = [PHPhotoLibrary sharedPhotoLibrary];</span><br><span class=\"line\">    [library performChanges:^&#123;</span><br><span class=\"line\">        [[PHAssetCreationRequest creationRequestForAsset] addResourceWithType:PHAssetResourceTypePhoto data:data options:options];</span><br><span class=\"line\">    &#125; completionHandler:handler];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p><strong>注意点</strong></p>\n<ul>\n<li>坐标换算<br>  <code>CGRect rect = [A convertRect:B.frame fromView:B.supverView]</code><br>  得到的<code>rect</code>就是<code>B</code>相对于<code>A</code>的新坐标.</li>\n</ul>\n<p><strong>demo地址</strong><br>    已经上传<code>github</code>, <a href=\"https://github.com/aioser/LRSImagePreview\">enjoy</a></p>\n","site":{"data":{}},"length":2110,"excerpt":"<p><strong>背景</strong><br>    原先项目内的图片预览框架用的是一个魔改的某开源框架, 里面的代码又杂又乱, 各种乱拷贝代码. 这周公司的项目任务已经做完, 就决定给这个框架自己重写一下.</p>","more":"<p><strong>效果</strong> <a href=\"http://blog.loktar.com.cn/image_preview.mp4\"><strong>点我去看效果</strong></a></p>\n<ul>\n<li>支持单图/多图点开按顺序预览</li>\n<li>支持单张放大/缩小</li>\n<li>支持从头部和尾部插入列表</li>\n<li>支持滑动回收预览</li>\n<li>图片可以是<code>GIF</code></li>\n<li>支持将图片保存入系统相册</li>\n</ul>\n<p><strong>实现</strong></p>\n<ul>\n<li>主体使用<code>UIScrollView</code>, 然后利用<code>UIScrollViewDelegate</code>的 <code>- scrollViewDidZoom:</code> 和 <code>- viewForZoomingInScrollView:</code>配合, 实现滚动、滑动和放大缩小功能.<ul>\n<li>此处需要注意的是: 层级结构为: <code>main UIScrollView</code> -&gt; [<code>sub UIScrollView</code> -&gt; <code>UIView</code> -&gt; <code>SDAnimationImageView</code>], 不然在拖拽时候会出现显示异常</li>\n<li>在 <code>sub UIScrollView</code> 的 <code>- scrollViewDidZoom:</code>中需要重设 <code>- viewForZoomingInScrollView: </code> 的位置.<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CGFloat ratio = MIN(self.bounds.size.width / size.width, self.bounds.size.height / size.height);</span><br><span class=\"line\">CGFloat W = ratio * size.width;</span><br><span class=\"line\">CGFloat H = ratio * size.height;</span><br><span class=\"line\">CGRect imageFrame = CGRectMake((self.bounds.size.width - W) / 2, (self.bounds.size.height - H) / 2, W, H);</span><br><span class=\"line\">self.containerView.frame = imageFrame;</span><br><span class=\"line\">self.imageView.frame = CGRectMake(0, 0, imageFrame.size.width, imageFrame.size.height);</span><br></pre></td></tr></table></figure></li>\n<li>给主体控件上添加<code>UITapGestureRecognizer</code>手势, 实现在拖拽的时候进行回收/重新布局. 主要的<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (void)handlePanGestureRecognizer:(UIPanGestureRecognizer *)sender &#123;</span><br><span class=\"line\">    static LRSImagePreviewZoomingImageView *currentView = nil;</span><br><span class=\"line\">    if (sender.state == UIGestureRecognizerStateBegan) &#123;</span><br><span class=\"line\">        /// 在手势开始的时候获取当前正在拖拽的自视图</span><br><span class=\"line\">        currentView = ...;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (currentView) &#123;</span><br><span class=\"line\">        if (sender.state == UIGestureRecognizerStateEnded) &#123;</span><br><span class=\"line\">            /// 重置</span><br><span class=\"line\">            currentView = nil;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            /// 拖拽动画</span><br><span class=\"line\">            CGPoint p = [sender translationInView:self];</span><br><span class=\"line\">            CGAffineTransform transform = CGAffineTransformMakeTranslation(p.x, p.y);</span><br><span class=\"line\">            CGFloat value = 1 - (MAX(fabs(p.x), fabs(p.y))) / 1000;</span><br><span class=\"line\">            transform = CGAffineTransformScale(transform, value, value);</span><br><span class=\"line\">            currentView.transform = transform;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>因为还需要从图片点击位置出现/回收视图, 所以还需要记录弹出预览图的点击位置.</li>\n<li>往头部插入数据的时候, 记得设置<code>Scroview</code>的偏移量</li>\n<li>需要支持<code>GIF</code>, 所以我们引用了<code>SDWebImage</code></li>\n<li>图片保存系统相册, 我们使用了系统的<code>Photos</code>框架<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (void)creationRequestWithData:(NSData *)data options:(nullable PHAssetResourceCreationOptions *)options completionHandler:(void (^)(BOOL, NSError * _Nullable))handler &#123;</span><br><span class=\"line\">    PHPhotoLibrary *library = [PHPhotoLibrary sharedPhotoLibrary];</span><br><span class=\"line\">    [library performChanges:^&#123;</span><br><span class=\"line\">        [[PHAssetCreationRequest creationRequestForAsset] addResourceWithType:PHAssetResourceTypePhoto data:data options:options];</span><br><span class=\"line\">    &#125; completionHandler:handler];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p><strong>注意点</strong></p>\n<ul>\n<li>坐标换算<br>  <code>CGRect rect = [A convertRect:B.frame fromView:B.supverView]</code><br>  得到的<code>rect</code>就是<code>B</code>相对于<code>A</code>的新坐标.</li>\n</ul>\n<p><strong>demo地址</strong><br>    已经上传<code>github</code>, <a href=\"https://github.com/aioser/LRSImagePreview\">enjoy</a></p>"},{"title":"ios-apm","date":"2021-08-31T08:14:43.000Z","_content":"\n**apm**\nApplication Performance Management，应用性能管理. 随着APP体量越来越大、业务越来越多~~什么功能都要做~~, CPU/内存占用过高、偶尔掉帧、启动缓慢、手机发热...这些问题接踵而来. 随着APP发布安装之后, CPU/内存使用率、帧数是否稳定、启动时间, 都留在了用户的使用过程中. 作为一个合格的开发者, 我们需要把这些数据量化, 展现在自己的面前, 然后分析代码, 解决可能存在的问题, 进而优化体验. \n虽然说市面上已经有相关SDK的服务商, 但是基本上都是黑盒的, 遇到了问题只能提交工单, 然后等待解诀, 但是得到的回复大多都是升级SDK.....所以就自己调研一下吧, 毕竟了解一下也是好的, 是吧?\n插入一段废话: 一个正常的APP开发流程应该是, `提出需求->代码实现->测试->发布->**收集用户反馈->优化需求/功能/代码->发布**-...` ~~有用的废话, 哈哈哈, 没有人会不知道吧, 哈哈哈, 😊cry~~循环往复.\n<!-- more -->\n**分析**\n近期对市面上的APM相关SDK和服务商做了一些调研, 像`umeng`. SDK主要提供以下几个指标: \n- 崩溃分析\n- 卡顿分析\n    - ANR\n    - 掉帧\n- 启动分析\n- 内存分析\n- CPU占用率\n有了相应的指标, 剩下的就是代码捕获到对应的数据了...再次感谢🙏滴滴团队开源. [doreamentKit](https://github.com/didi/DoraemonKit)\n**实施**\n- [崩溃分析](#excetion)\n    - 监听`signal`, 来自于 `DoraemonCrashSignalExceptionHandler`. 注意⚠️: 除了 `SIGABRT`, 同时还需要监听 `SIGSEGV`、`SIGFPE`、`SIGBUS`、`SIGTRAP`、`SIGILL`、`SIGPIPE`、`SIGSYS`.\n```\n+ (void)registerHandler {\n    // 一定要记录原有的监听, 不然会影响其他相似功能的正常使用, 比如 `umeng`, `bugly`.\n    [self backupOriginalHandler];\n    // 注册新的监听\n    [self signalRegister];\n}\n\n+ (void)backupOriginalHandler {\n    struct sigaction old_action_abrt;\n    sigaction(SIGABRT, NULL, &old_action_abrt);\n    if (old_action_abrt.sa_sigaction) {\n        previousABRTSignalHandler = old_action_abrt.sa_sigaction;\n    }\n    ...\n}\n\n+ (void)signalRegister {\n    DoraemonSignalRegister(SIGABRT);\n    ...\n}\n\nstatic void DoraemonSignalRegister(int signal) {\n    struct sigaction action;\n    action.sa_sigaction = DoraemonSignalHandler;\n    action.sa_flags = SA_NODEFER | SA_SIGINFO;\n    sigemptyset(&action.sa_mask);\n    sigaction(signal, &action, 0);\n}\n\n#pragma mark SignalCrash Handler\n\nstatic void DoraemonSignalHandler(int signal, siginfo_t* info, void* context) {\n    NSMutableString *mstr = [[NSMutableString alloc] init];\n    [mstr appendString:@\"Signal Exception:\\n\"];\n    [mstr appendString:[NSString stringWithFormat:@\"Signal %@ was raised.\\n\", signalName(signal)]];\n    [mstr appendString:@\"Call Stack:\\n\"];\n    // 这里过滤掉第一行日志\n    // 因为注册了信号崩溃回调方法，系统会来调用，将记录在调用堆栈上，因此此行日志需要过滤掉\n    for (NSUInteger index = 1; index < NSThread.callStackSymbols.count; index++) {\n        NSString *str = [NSThread.callStackSymbols objectAtIndex:index];\n        [mstr appendString:[str stringByAppendingString:@\"\\n\"]];\n    }\n    \n    [mstr appendString:@\"threadInfo:\\n\"];\n    [mstr appendString:[[NSThread currentThread] description]];\n    \n    // 保存崩溃日志到沙盒cache目录\n    ...\n    \n    DoraemonClearSignalRigister();\n    \n    // 调用之前崩溃的回调函数\n    previousSignalHandler(signal, info, context);\n    \n    kill(getpid(), SIGKILL);\n}\n\n#pragma mark Signal To Name\n\nstatic NSString *signalName(int signal) {\n    NSString *signalName;\n    switch (signal) {\n        case SIGABRT:\n            signalName = @\"SIGABRT\";\n            break;\n        ...\n        default:\n            break;\n    }\n    return signalName;\n}\n\n#pragma mark Previous Signal\n\nstatic void previousSignalHandler(int signal, siginfo_t *info, void *context) {\n    SignalHandler previousSignalHandler = NULL;\n    switch (signal) {\n        case SIGABRT:\n            previousSignalHandler = previousABRTSignalHandler;\n            break;\n        default:\n            break;\n    }\n    \n    if (previousSignalHandler) {\n        previousSignalHandler(signal, info, context);\n    }\n}\n\n#pragma mark Clear\n\nstatic void DoraemonClearSignalRigister() {\n    signal(SIGABRT,SIG_DFL);\n    ...\n}\n```\n\n","source":"_posts/ios-apm.md","raw":"---\ntitle: ios-apm\ntags:\n#   - apm\n#   - ios\n#   - 性能指标\n#   - 个人信息安全\ndate: 2021-08-31 16:14:43\n---\n\n**apm**\nApplication Performance Management，应用性能管理. 随着APP体量越来越大、业务越来越多~~什么功能都要做~~, CPU/内存占用过高、偶尔掉帧、启动缓慢、手机发热...这些问题接踵而来. 随着APP发布安装之后, CPU/内存使用率、帧数是否稳定、启动时间, 都留在了用户的使用过程中. 作为一个合格的开发者, 我们需要把这些数据量化, 展现在自己的面前, 然后分析代码, 解决可能存在的问题, 进而优化体验. \n虽然说市面上已经有相关SDK的服务商, 但是基本上都是黑盒的, 遇到了问题只能提交工单, 然后等待解诀, 但是得到的回复大多都是升级SDK.....所以就自己调研一下吧, 毕竟了解一下也是好的, 是吧?\n插入一段废话: 一个正常的APP开发流程应该是, `提出需求->代码实现->测试->发布->**收集用户反馈->优化需求/功能/代码->发布**-...` ~~有用的废话, 哈哈哈, 没有人会不知道吧, 哈哈哈, 😊cry~~循环往复.\n<!-- more -->\n**分析**\n近期对市面上的APM相关SDK和服务商做了一些调研, 像`umeng`. SDK主要提供以下几个指标: \n- 崩溃分析\n- 卡顿分析\n    - ANR\n    - 掉帧\n- 启动分析\n- 内存分析\n- CPU占用率\n有了相应的指标, 剩下的就是代码捕获到对应的数据了...再次感谢🙏滴滴团队开源. [doreamentKit](https://github.com/didi/DoraemonKit)\n**实施**\n- [崩溃分析](#excetion)\n    - 监听`signal`, 来自于 `DoraemonCrashSignalExceptionHandler`. 注意⚠️: 除了 `SIGABRT`, 同时还需要监听 `SIGSEGV`、`SIGFPE`、`SIGBUS`、`SIGTRAP`、`SIGILL`、`SIGPIPE`、`SIGSYS`.\n```\n+ (void)registerHandler {\n    // 一定要记录原有的监听, 不然会影响其他相似功能的正常使用, 比如 `umeng`, `bugly`.\n    [self backupOriginalHandler];\n    // 注册新的监听\n    [self signalRegister];\n}\n\n+ (void)backupOriginalHandler {\n    struct sigaction old_action_abrt;\n    sigaction(SIGABRT, NULL, &old_action_abrt);\n    if (old_action_abrt.sa_sigaction) {\n        previousABRTSignalHandler = old_action_abrt.sa_sigaction;\n    }\n    ...\n}\n\n+ (void)signalRegister {\n    DoraemonSignalRegister(SIGABRT);\n    ...\n}\n\nstatic void DoraemonSignalRegister(int signal) {\n    struct sigaction action;\n    action.sa_sigaction = DoraemonSignalHandler;\n    action.sa_flags = SA_NODEFER | SA_SIGINFO;\n    sigemptyset(&action.sa_mask);\n    sigaction(signal, &action, 0);\n}\n\n#pragma mark SignalCrash Handler\n\nstatic void DoraemonSignalHandler(int signal, siginfo_t* info, void* context) {\n    NSMutableString *mstr = [[NSMutableString alloc] init];\n    [mstr appendString:@\"Signal Exception:\\n\"];\n    [mstr appendString:[NSString stringWithFormat:@\"Signal %@ was raised.\\n\", signalName(signal)]];\n    [mstr appendString:@\"Call Stack:\\n\"];\n    // 这里过滤掉第一行日志\n    // 因为注册了信号崩溃回调方法，系统会来调用，将记录在调用堆栈上，因此此行日志需要过滤掉\n    for (NSUInteger index = 1; index < NSThread.callStackSymbols.count; index++) {\n        NSString *str = [NSThread.callStackSymbols objectAtIndex:index];\n        [mstr appendString:[str stringByAppendingString:@\"\\n\"]];\n    }\n    \n    [mstr appendString:@\"threadInfo:\\n\"];\n    [mstr appendString:[[NSThread currentThread] description]];\n    \n    // 保存崩溃日志到沙盒cache目录\n    ...\n    \n    DoraemonClearSignalRigister();\n    \n    // 调用之前崩溃的回调函数\n    previousSignalHandler(signal, info, context);\n    \n    kill(getpid(), SIGKILL);\n}\n\n#pragma mark Signal To Name\n\nstatic NSString *signalName(int signal) {\n    NSString *signalName;\n    switch (signal) {\n        case SIGABRT:\n            signalName = @\"SIGABRT\";\n            break;\n        ...\n        default:\n            break;\n    }\n    return signalName;\n}\n\n#pragma mark Previous Signal\n\nstatic void previousSignalHandler(int signal, siginfo_t *info, void *context) {\n    SignalHandler previousSignalHandler = NULL;\n    switch (signal) {\n        case SIGABRT:\n            previousSignalHandler = previousABRTSignalHandler;\n            break;\n        default:\n            break;\n    }\n    \n    if (previousSignalHandler) {\n        previousSignalHandler(signal, info, context);\n    }\n}\n\n#pragma mark Clear\n\nstatic void DoraemonClearSignalRigister() {\n    signal(SIGABRT,SIG_DFL);\n    ...\n}\n```\n\n","slug":"ios-apm","published":1,"updated":"2021-08-31T08:30:18.817Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckszt8srg000brcp8cg1ad6l0","content":"<p><strong>apm</strong><br>Application Performance Management，应用性能管理. 随着APP体量越来越大、业务越来越多<del>什么功能都要做</del>, CPU/内存占用过高、偶尔掉帧、启动缓慢、手机发热…这些问题接踵而来. 随着APP发布安装之后, CPU/内存使用率、帧数是否稳定、启动时间, 都留在了用户的使用过程中. 作为一个合格的开发者, 我们需要把这些数据量化, 展现在自己的面前, 然后分析代码, 解决可能存在的问题, 进而优化体验.<br>虽然说市面上已经有相关SDK的服务商, 但是基本上都是黑盒的, 遇到了问题只能提交工单, 然后等待解诀, 但是得到的回复大多都是升级SDK…..所以就自己调研一下吧, 毕竟了解一下也是好的, 是吧?<br>插入一段废话: 一个正常的APP开发流程应该是, <code>提出需求-&gt;代码实现-&gt;测试-&gt;发布-&gt;**收集用户反馈-&gt;优化需求/功能/代码-&gt;发布**-...</code> <del>有用的废话, 哈哈哈, 没有人会不知道吧, 哈哈哈, 😊cry</del>循环往复.</p>\n<span id=\"more\"></span>\n<p><strong>分析</strong><br>近期对市面上的APM相关SDK和服务商做了一些调研, 像<code>umeng</code>. SDK主要提供以下几个指标: </p>\n<ul>\n<li>崩溃分析</li>\n<li>卡顿分析<ul>\n<li>ANR</li>\n<li>掉帧</li>\n</ul>\n</li>\n<li>启动分析</li>\n<li>内存分析</li>\n<li>CPU占用率<br>有了相应的指标, 剩下的就是代码捕获到对应的数据了…再次感谢🙏滴滴团队开源. <a href=\"https://github.com/didi/DoraemonKit\">doreamentKit</a></li>\n</ul>\n<p><strong>实施</strong></p>\n<ul>\n<li><a href=\"#excetion\">崩溃分析</a><ul>\n<li>监听<code>signal</code>, 来自于 <code>DoraemonCrashSignalExceptionHandler</code>. 注意⚠️: 除了 <code>SIGABRT</code>, 同时还需要监听 <code>SIGSEGV</code>、<code>SIGFPE</code>、<code>SIGBUS</code>、<code>SIGTRAP</code>、<code>SIGILL</code>、<code>SIGPIPE</code>、<code>SIGSYS</code>.<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (void)registerHandler &#123;</span><br><span class=\"line\">    // 一定要记录原有的监听, 不然会影响其他相似功能的正常使用, 比如 `umeng`, `bugly`.</span><br><span class=\"line\">    [self backupOriginalHandler];</span><br><span class=\"line\">    // 注册新的监听</span><br><span class=\"line\">    [self signalRegister];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (void)backupOriginalHandler &#123;</span><br><span class=\"line\">    struct sigaction old_action_abrt;</span><br><span class=\"line\">    sigaction(SIGABRT, NULL, &amp;old_action_abrt);</span><br><span class=\"line\">    if (old_action_abrt.sa_sigaction) &#123;</span><br><span class=\"line\">        previousABRTSignalHandler = old_action_abrt.sa_sigaction;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (void)signalRegister &#123;</span><br><span class=\"line\">    DoraemonSignalRegister(SIGABRT);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static void DoraemonSignalRegister(int signal) &#123;</span><br><span class=\"line\">    struct sigaction action;</span><br><span class=\"line\">    action.sa_sigaction = DoraemonSignalHandler;</span><br><span class=\"line\">    action.sa_flags = SA_NODEFER | SA_SIGINFO;</span><br><span class=\"line\">    sigemptyset(&amp;action.sa_mask);</span><br><span class=\"line\">    sigaction(signal, &amp;action, 0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark SignalCrash Handler</span><br><span class=\"line\"></span><br><span class=\"line\">static void DoraemonSignalHandler(int signal, siginfo_t* info, void* context) &#123;</span><br><span class=\"line\">    NSMutableString *mstr = [[NSMutableString alloc] init];</span><br><span class=\"line\">    [mstr appendString:@&quot;Signal Exception:\\n&quot;];</span><br><span class=\"line\">    [mstr appendString:[NSString stringWithFormat:@&quot;Signal %@ was raised.\\n&quot;, signalName(signal)]];</span><br><span class=\"line\">    [mstr appendString:@&quot;Call Stack:\\n&quot;];</span><br><span class=\"line\">    // 这里过滤掉第一行日志</span><br><span class=\"line\">    // 因为注册了信号崩溃回调方法，系统会来调用，将记录在调用堆栈上，因此此行日志需要过滤掉</span><br><span class=\"line\">    for (NSUInteger index = 1; index &lt; NSThread.callStackSymbols.count; index++) &#123;</span><br><span class=\"line\">        NSString *str = [NSThread.callStackSymbols objectAtIndex:index];</span><br><span class=\"line\">        [mstr appendString:[str stringByAppendingString:@&quot;\\n&quot;]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [mstr appendString:@&quot;threadInfo:\\n&quot;];</span><br><span class=\"line\">    [mstr appendString:[[NSThread currentThread] description]];</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 保存崩溃日志到沙盒cache目录</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    DoraemonClearSignalRigister();</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 调用之前崩溃的回调函数</span><br><span class=\"line\">    previousSignalHandler(signal, info, context);</span><br><span class=\"line\">    </span><br><span class=\"line\">    kill(getpid(), SIGKILL);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark Signal To Name</span><br><span class=\"line\"></span><br><span class=\"line\">static NSString *signalName(int signal) &#123;</span><br><span class=\"line\">    NSString *signalName;</span><br><span class=\"line\">    switch (signal) &#123;</span><br><span class=\"line\">        case SIGABRT:</span><br><span class=\"line\">            signalName = @&quot;SIGABRT&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return signalName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark Previous Signal</span><br><span class=\"line\"></span><br><span class=\"line\">static void previousSignalHandler(int signal, siginfo_t *info, void *context) &#123;</span><br><span class=\"line\">    SignalHandler previousSignalHandler = NULL;</span><br><span class=\"line\">    switch (signal) &#123;</span><br><span class=\"line\">        case SIGABRT:</span><br><span class=\"line\">            previousSignalHandler = previousABRTSignalHandler;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (previousSignalHandler) &#123;</span><br><span class=\"line\">        previousSignalHandler(signal, info, context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark Clear</span><br><span class=\"line\"></span><br><span class=\"line\">static void DoraemonClearSignalRigister() &#123;</span><br><span class=\"line\">    signal(SIGABRT,SIG_DFL);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"length":2985,"excerpt":"<p><strong>apm</strong><br>Application Performance Management，应用性能管理. 随着APP体量越来越大、业务越来越多<del>什么功能都要做</del>, CPU/内存占用过高、偶尔掉帧、启动缓慢、手机发热…这些问题接踵而来. 随着APP发布安装之后, CPU/内存使用率、帧数是否稳定、启动时间, 都留在了用户的使用过程中. 作为一个合格的开发者, 我们需要把这些数据量化, 展现在自己的面前, 然后分析代码, 解决可能存在的问题, 进而优化体验.<br>虽然说市面上已经有相关SDK的服务商, 但是基本上都是黑盒的, 遇到了问题只能提交工单, 然后等待解诀, 但是得到的回复大多都是升级SDK…..所以就自己调研一下吧, 毕竟了解一下也是好的, 是吧?<br>插入一段废话: 一个正常的APP开发流程应该是, <code>提出需求-&gt;代码实现-&gt;测试-&gt;发布-&gt;**收集用户反馈-&gt;优化需求/功能/代码-&gt;发布**-...</code> <del>有用的废话, 哈哈哈, 没有人会不知道吧, 哈哈哈, 😊cry</del>循环往复.</p>","more":"<p><strong>分析</strong><br>近期对市面上的APM相关SDK和服务商做了一些调研, 像<code>umeng</code>. SDK主要提供以下几个指标: </p>\n<ul>\n<li>崩溃分析</li>\n<li>卡顿分析<ul>\n<li>ANR</li>\n<li>掉帧</li>\n</ul>\n</li>\n<li>启动分析</li>\n<li>内存分析</li>\n<li>CPU占用率<br>有了相应的指标, 剩下的就是代码捕获到对应的数据了…再次感谢🙏滴滴团队开源. <a href=\"https://github.com/didi/DoraemonKit\">doreamentKit</a></li>\n</ul>\n<p><strong>实施</strong></p>\n<ul>\n<li><a href=\"#excetion\">崩溃分析</a><ul>\n<li>监听<code>signal</code>, 来自于 <code>DoraemonCrashSignalExceptionHandler</code>. 注意⚠️: 除了 <code>SIGABRT</code>, 同时还需要监听 <code>SIGSEGV</code>、<code>SIGFPE</code>、<code>SIGBUS</code>、<code>SIGTRAP</code>、<code>SIGILL</code>、<code>SIGPIPE</code>、<code>SIGSYS</code>.<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (void)registerHandler &#123;</span><br><span class=\"line\">    // 一定要记录原有的监听, 不然会影响其他相似功能的正常使用, 比如 `umeng`, `bugly`.</span><br><span class=\"line\">    [self backupOriginalHandler];</span><br><span class=\"line\">    // 注册新的监听</span><br><span class=\"line\">    [self signalRegister];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (void)backupOriginalHandler &#123;</span><br><span class=\"line\">    struct sigaction old_action_abrt;</span><br><span class=\"line\">    sigaction(SIGABRT, NULL, &amp;old_action_abrt);</span><br><span class=\"line\">    if (old_action_abrt.sa_sigaction) &#123;</span><br><span class=\"line\">        previousABRTSignalHandler = old_action_abrt.sa_sigaction;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ (void)signalRegister &#123;</span><br><span class=\"line\">    DoraemonSignalRegister(SIGABRT);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">static void DoraemonSignalRegister(int signal) &#123;</span><br><span class=\"line\">    struct sigaction action;</span><br><span class=\"line\">    action.sa_sigaction = DoraemonSignalHandler;</span><br><span class=\"line\">    action.sa_flags = SA_NODEFER | SA_SIGINFO;</span><br><span class=\"line\">    sigemptyset(&amp;action.sa_mask);</span><br><span class=\"line\">    sigaction(signal, &amp;action, 0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark SignalCrash Handler</span><br><span class=\"line\"></span><br><span class=\"line\">static void DoraemonSignalHandler(int signal, siginfo_t* info, void* context) &#123;</span><br><span class=\"line\">    NSMutableString *mstr = [[NSMutableString alloc] init];</span><br><span class=\"line\">    [mstr appendString:@&quot;Signal Exception:\\n&quot;];</span><br><span class=\"line\">    [mstr appendString:[NSString stringWithFormat:@&quot;Signal %@ was raised.\\n&quot;, signalName(signal)]];</span><br><span class=\"line\">    [mstr appendString:@&quot;Call Stack:\\n&quot;];</span><br><span class=\"line\">    // 这里过滤掉第一行日志</span><br><span class=\"line\">    // 因为注册了信号崩溃回调方法，系统会来调用，将记录在调用堆栈上，因此此行日志需要过滤掉</span><br><span class=\"line\">    for (NSUInteger index = 1; index &lt; NSThread.callStackSymbols.count; index++) &#123;</span><br><span class=\"line\">        NSString *str = [NSThread.callStackSymbols objectAtIndex:index];</span><br><span class=\"line\">        [mstr appendString:[str stringByAppendingString:@&quot;\\n&quot;]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [mstr appendString:@&quot;threadInfo:\\n&quot;];</span><br><span class=\"line\">    [mstr appendString:[[NSThread currentThread] description]];</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 保存崩溃日志到沙盒cache目录</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    </span><br><span class=\"line\">    DoraemonClearSignalRigister();</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 调用之前崩溃的回调函数</span><br><span class=\"line\">    previousSignalHandler(signal, info, context);</span><br><span class=\"line\">    </span><br><span class=\"line\">    kill(getpid(), SIGKILL);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark Signal To Name</span><br><span class=\"line\"></span><br><span class=\"line\">static NSString *signalName(int signal) &#123;</span><br><span class=\"line\">    NSString *signalName;</span><br><span class=\"line\">    switch (signal) &#123;</span><br><span class=\"line\">        case SIGABRT:</span><br><span class=\"line\">            signalName = @&quot;SIGABRT&quot;;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return signalName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark Previous Signal</span><br><span class=\"line\"></span><br><span class=\"line\">static void previousSignalHandler(int signal, siginfo_t *info, void *context) &#123;</span><br><span class=\"line\">    SignalHandler previousSignalHandler = NULL;</span><br><span class=\"line\">    switch (signal) &#123;</span><br><span class=\"line\">        case SIGABRT:</span><br><span class=\"line\">            previousSignalHandler = previousABRTSignalHandler;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (previousSignalHandler) &#123;</span><br><span class=\"line\">        previousSignalHandler(signal, info, context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#pragma mark Clear</span><br><span class=\"line\"></span><br><span class=\"line\">static void DoraemonClearSignalRigister() &#123;</span><br><span class=\"line\">    signal(SIGABRT,SIG_DFL);</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>"},{"title":"iOS @功能始末","date":"2021-08-03T03:44:17.000Z","_content":"\n- ### 前言\n    前段时间产品给了一个在`@`好友的功能\n    - 用户在单独输入`@`符号的时候, 触发好友列表页面弹出, 然后在用户点击好友A的时候在输入框内自动设置文案: `@A `; \n    - 在这段文案后输入`删除`的时候, 整段文案一起被移除.\n    - 用户发出这段文本以后, 其他用户可以点击前往用户A的个人主页\n<!-- more -->\n- ### 分析\n    - 在 UITextfield 的 delegate 内监听关键字 `@` 和` `, 分别实现弹出好友列表和移除文案操作, 这个很简单.\n    - 在用户选择好友后, 文案拼接拼装到 UITextfield 的 text 内; 在监听到 ` `输入的时候, 通过`字符串匹配`或者`正则表达式`, 移除光标前一段符合规则的 `@A `文本.\n    - 在发出文本的时候, 基于字符串查找逻辑, 将特殊文本和用户id做关联, 将整个数据包发送给后端. 然后进行转发.\n    - 以上, 这个功能就已经实现了. \n- ### 问题\n    上面的方案虽然可以解决基础的问题, 但是(PS1: 凡事总有一个但是; PS2: 大家都讨厌这个但是...)\n    - 如果好友A的昵称在存在空格 ` ` (文本: `@A B `)的情况下, 以上方案的删除就会失效. 我们也不能无脑暴力的按照 `@` 和 ` ` 进行删除文本, 这样 `BUG🐛` 会更加严重.\n    - 因为需要考虑数据的跨端传输, 而因为用户昵称可能存在 emoji 字符或者其他特殊字体, 所以使用位置计算告知后端index进行匹配的话, 可能会有不同语言的index计算错误问题. 比如 [swift](https://swift.org)~~谁会不爱 `swift` 那~~ 内的 `😊.count` 为 1, 而 `objective-C` 和 `java `是 2. 所以这个方案怎么看都不那么合理...\n    这时候, 多么希望有方案可以给某一段文案设置(标记)成一个整体的方案啊.\n- ### 解决\n    原生的控件已经满足不了或者需要大量的定制化才能我们的需求了, 目光只能看向开源轮子. 这时候 `YYText` 引入了眼帘.\n    `YYText`的数据流`demo`中, 使用了 `YYTextBackedString` 实现 `@\":)` 替换 😊 制作表情菜单. 这就给了鶸需求实现的灵感.\n    - 首先自定义一个 `YYTextView` 的 `textParser`. 重写 `- (BOOL)parseText:(NSMutableAttributedString *)text selectedRange:(NSRangePointer)selectedRange` 方法\n    - 定义一段特殊字符串 `BackedString` , 里面包含了用户昵称 `A` 和 他的用户 `id`, 然后对用户对可见文本 `FrontString` 为 `@A `. 配合 `NSMutableAttributedString` 扩展方法 `- yy_setTextBackedString: range:`, 对 `YYTextView` 的可见内容进行替换. 这样我们就把所需要的全部信息藏入了富文本内. \n    - 使用 `- yy_setTextBinding: range: `将这段可见文本设置成一个整体, 从而实现整体删除.\n    - 使用 `- yy_setTextHighlight: range: `设置局部文本高亮.\n    - ... 其他的完全可以基于自己的需求自定义.\n\n- #### 回到 `BackedString`.\n    - 这一段自定义文本尽量稍微复杂一点, 不然被黑产破解的话, 线上就会出现一些奇奇怪怪的现象了...\n    - 这里面还有一个问题, 使用以上方案的时候, 如果用户点击这段文本 `copy` 的时候, 会把密文拿出来. 所以这时候就需要重写 `YYText` 内的 `copy` 方法, 把 `FrontString` 拿出来.\n    ```\n    /// Save current selected attributed text to pasteboard.\n    - (void)_copySelectedTextToPasteboard {\n        if (_allowsCopyAttributedString) {\n            NSAttributedString *text = [_innerText attributedSubstringFromRange:_selectedTextRange.asRange];\n            if (text.length) {\n                [UIPasteboard generalPasteboard].yy_AttributedString = text;\n            }\n        } else {\n            NSString *string = [_innerText attributedSubstringFromRange:_selectedTextRange.asRange].string;\n            if (string.length) {\n                [UIPasteboard generalPasteboard].string = string;\n            }\n        }\n    }\n    ```\n- ##### 关于接收方显示问题 \n    `YYLabel`和`UILabel`都可以用. ~~显示从来都不是问题~~ \n- ##### 关于 YYText\n    目前iOS 15已经来了, `YYText`年久失修, 在某些情况下会出一些奇怪的BUG, 能不用就不用吧. \n","source":"_posts/ios_tag.md","raw":"---\ntitle: iOS @功能始末\ndate: 2021-08-03 11:44:17\ncategories: [技术, iOS, 艾特, YYText]\ntags: [技术, iOS, 艾特, YYText]\n---\n\n- ### 前言\n    前段时间产品给了一个在`@`好友的功能\n    - 用户在单独输入`@`符号的时候, 触发好友列表页面弹出, 然后在用户点击好友A的时候在输入框内自动设置文案: `@A `; \n    - 在这段文案后输入`删除`的时候, 整段文案一起被移除.\n    - 用户发出这段文本以后, 其他用户可以点击前往用户A的个人主页\n<!-- more -->\n- ### 分析\n    - 在 UITextfield 的 delegate 内监听关键字 `@` 和` `, 分别实现弹出好友列表和移除文案操作, 这个很简单.\n    - 在用户选择好友后, 文案拼接拼装到 UITextfield 的 text 内; 在监听到 ` `输入的时候, 通过`字符串匹配`或者`正则表达式`, 移除光标前一段符合规则的 `@A `文本.\n    - 在发出文本的时候, 基于字符串查找逻辑, 将特殊文本和用户id做关联, 将整个数据包发送给后端. 然后进行转发.\n    - 以上, 这个功能就已经实现了. \n- ### 问题\n    上面的方案虽然可以解决基础的问题, 但是(PS1: 凡事总有一个但是; PS2: 大家都讨厌这个但是...)\n    - 如果好友A的昵称在存在空格 ` ` (文本: `@A B `)的情况下, 以上方案的删除就会失效. 我们也不能无脑暴力的按照 `@` 和 ` ` 进行删除文本, 这样 `BUG🐛` 会更加严重.\n    - 因为需要考虑数据的跨端传输, 而因为用户昵称可能存在 emoji 字符或者其他特殊字体, 所以使用位置计算告知后端index进行匹配的话, 可能会有不同语言的index计算错误问题. 比如 [swift](https://swift.org)~~谁会不爱 `swift` 那~~ 内的 `😊.count` 为 1, 而 `objective-C` 和 `java `是 2. 所以这个方案怎么看都不那么合理...\n    这时候, 多么希望有方案可以给某一段文案设置(标记)成一个整体的方案啊.\n- ### 解决\n    原生的控件已经满足不了或者需要大量的定制化才能我们的需求了, 目光只能看向开源轮子. 这时候 `YYText` 引入了眼帘.\n    `YYText`的数据流`demo`中, 使用了 `YYTextBackedString` 实现 `@\":)` 替换 😊 制作表情菜单. 这就给了鶸需求实现的灵感.\n    - 首先自定义一个 `YYTextView` 的 `textParser`. 重写 `- (BOOL)parseText:(NSMutableAttributedString *)text selectedRange:(NSRangePointer)selectedRange` 方法\n    - 定义一段特殊字符串 `BackedString` , 里面包含了用户昵称 `A` 和 他的用户 `id`, 然后对用户对可见文本 `FrontString` 为 `@A `. 配合 `NSMutableAttributedString` 扩展方法 `- yy_setTextBackedString: range:`, 对 `YYTextView` 的可见内容进行替换. 这样我们就把所需要的全部信息藏入了富文本内. \n    - 使用 `- yy_setTextBinding: range: `将这段可见文本设置成一个整体, 从而实现整体删除.\n    - 使用 `- yy_setTextHighlight: range: `设置局部文本高亮.\n    - ... 其他的完全可以基于自己的需求自定义.\n\n- #### 回到 `BackedString`.\n    - 这一段自定义文本尽量稍微复杂一点, 不然被黑产破解的话, 线上就会出现一些奇奇怪怪的现象了...\n    - 这里面还有一个问题, 使用以上方案的时候, 如果用户点击这段文本 `copy` 的时候, 会把密文拿出来. 所以这时候就需要重写 `YYText` 内的 `copy` 方法, 把 `FrontString` 拿出来.\n    ```\n    /// Save current selected attributed text to pasteboard.\n    - (void)_copySelectedTextToPasteboard {\n        if (_allowsCopyAttributedString) {\n            NSAttributedString *text = [_innerText attributedSubstringFromRange:_selectedTextRange.asRange];\n            if (text.length) {\n                [UIPasteboard generalPasteboard].yy_AttributedString = text;\n            }\n        } else {\n            NSString *string = [_innerText attributedSubstringFromRange:_selectedTextRange.asRange].string;\n            if (string.length) {\n                [UIPasteboard generalPasteboard].string = string;\n            }\n        }\n    }\n    ```\n- ##### 关于接收方显示问题 \n    `YYLabel`和`UILabel`都可以用. ~~显示从来都不是问题~~ \n- ##### 关于 YYText\n    目前iOS 15已经来了, `YYText`年久失修, 在某些情况下会出一些奇怪的BUG, 能不用就不用吧. \n","slug":"ios_tag","published":1,"updated":"2021-08-09T10:14:18.790Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckszt8srg000crcp80hqi8ba8","content":"<ul>\n<li><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>  前段时间产品给了一个在<code>@</code>好友的功能</p>\n<ul>\n<li>用户在单独输入<code>@</code>符号的时候, 触发好友列表页面弹出, 然后在用户点击好友A的时候在输入框内自动设置文案: <code>@A </code>; </li>\n<li>在这段文案后输入<code>删除</code>的时候, 整段文案一起被移除.</li>\n<li>用户发出这段文本以后, 其他用户可以点击前往用户A的个人主页<span id=\"more\"></span></li>\n</ul>\n</li>\n<li><h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><ul>\n<li>在 UITextfield 的 delegate 内监听关键字 <code>@</code> 和<code> </code>, 分别实现弹出好友列表和移除文案操作, 这个很简单.</li>\n<li>在用户选择好友后, 文案拼接拼装到 UITextfield 的 text 内; 在监听到 <code> </code>输入的时候, 通过<code>字符串匹配</code>或者<code>正则表达式</code>, 移除光标前一段符合规则的 <code>@A </code>文本.</li>\n<li>在发出文本的时候, 基于字符串查找逻辑, 将特殊文本和用户id做关联, 将整个数据包发送给后端. 然后进行转发.</li>\n<li>以上, 这个功能就已经实现了. </li>\n</ul>\n</li>\n<li><h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>  上面的方案虽然可以解决基础的问题, 但是(PS1: 凡事总有一个但是; PS2: 大家都讨厌这个但是…)</p>\n<ul>\n<li>如果好友A的昵称在存在空格 <code> </code> (文本: <code>@A B </code>)的情况下, 以上方案的删除就会失效. 我们也不能无脑暴力的按照 <code>@</code> 和 <code> </code> 进行删除文本, 这样 <code>BUG🐛</code> 会更加严重.</li>\n<li>因为需要考虑数据的跨端传输, 而因为用户昵称可能存在 emoji 字符或者其他特殊字体, 所以使用位置计算告知后端index进行匹配的话, 可能会有不同语言的index计算错误问题. 比如 <a href=\"https://swift.org/\">swift</a><del>谁会不爱 <code>swift</code> 那</del> 内的 <code>😊.count</code> 为 1, 而 <code>objective-C</code> 和 <code>java </code>是 2. 所以这个方案怎么看都不那么合理…<br>这时候, 多么希望有方案可以给某一段文案设置(标记)成一个整体的方案啊.</li>\n</ul>\n</li>\n<li><h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>  原生的控件已经满足不了或者需要大量的定制化才能我们的需求了, 目光只能看向开源轮子. 这时候 <code>YYText</code> 引入了眼帘.<br>  <code>YYText</code>的数据流<code>demo</code>中, 使用了 <code>YYTextBackedString</code> 实现 <code>@&quot;:)</code> 替换 😊 制作表情菜单. 这就给了鶸需求实现的灵感.</p>\n<ul>\n<li>首先自定义一个 <code>YYTextView</code> 的 <code>textParser</code>. 重写 <code>- (BOOL)parseText:(NSMutableAttributedString *)text selectedRange:(NSRangePointer)selectedRange</code> 方法</li>\n<li>定义一段特殊字符串 <code>BackedString</code> , 里面包含了用户昵称 <code>A</code> 和 他的用户 <code>id</code>, 然后对用户对可见文本 <code>FrontString</code> 为 <code>@A </code>. 配合 <code>NSMutableAttributedString</code> 扩展方法 <code>- yy_setTextBackedString: range:</code>, 对 <code>YYTextView</code> 的可见内容进行替换. 这样我们就把所需要的全部信息藏入了富文本内. </li>\n<li>使用 <code>- yy_setTextBinding: range: </code>将这段可见文本设置成一个整体, 从而实现整体删除.</li>\n<li>使用 <code>- yy_setTextHighlight: range: </code>设置局部文本高亮.</li>\n<li>… 其他的完全可以基于自己的需求自定义.</li>\n</ul>\n</li>\n<li><h4 id=\"回到-BackedString\"><a href=\"#回到-BackedString\" class=\"headerlink\" title=\"回到 BackedString.\"></a>回到 <code>BackedString</code>.</h4><ul>\n<li>这一段自定义文本尽量稍微复杂一点, 不然被黑产破解的话, 线上就会出现一些奇奇怪怪的现象了…</li>\n<li>这里面还有一个问题, 使用以上方案的时候, 如果用户点击这段文本 <code>copy</code> 的时候, 会把密文拿出来. 所以这时候就需要重写 <code>YYText</code> 内的 <code>copy</code> 方法, 把 <code>FrontString</code> 拿出来.<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// Save current selected attributed text to pasteboard.</span><br><span class=\"line\">- (void)_copySelectedTextToPasteboard &#123;</span><br><span class=\"line\">    if (_allowsCopyAttributedString) &#123;</span><br><span class=\"line\">        NSAttributedString *text = [_innerText attributedSubstringFromRange:_selectedTextRange.asRange];</span><br><span class=\"line\">        if (text.length) &#123;</span><br><span class=\"line\">            [UIPasteboard generalPasteboard].yy_AttributedString = text;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        NSString *string = [_innerText attributedSubstringFromRange:_selectedTextRange.asRange].string;</span><br><span class=\"line\">        if (string.length) &#123;</span><br><span class=\"line\">            [UIPasteboard generalPasteboard].string = string;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><h5 id=\"关于接收方显示问题\"><a href=\"#关于接收方显示问题\" class=\"headerlink\" title=\"关于接收方显示问题\"></a>关于接收方显示问题</h5><p>  <code>YYLabel</code>和<code>UILabel</code>都可以用. <del>显示从来都不是问题</del> </p>\n</li>\n<li><h5 id=\"关于-YYText\"><a href=\"#关于-YYText\" class=\"headerlink\" title=\"关于 YYText\"></a>关于 YYText</h5><p>  目前iOS 15已经来了, <code>YYText</code>年久失修, 在某些情况下会出一些奇怪的BUG, 能不用就不用吧. </p>\n</li>\n</ul>\n","site":{"data":{}},"length":1922,"excerpt":"<ul>\n<li><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>  前段时间产品给了一个在<code>@</code>好友的功能</p>\n<ul>\n<li>用户在单独输入<code>@</code>符号的时候, 触发好友列表页面弹出, 然后在用户点击好友A的时候在输入框内自动设置文案: <code>@A </code>; </li>\n<li>在这段文案后输入<code>删除</code>的时候, 整段文案一起被移除.</li>\n<li>用户发出这段文本以后, 其他用户可以点击前往用户A的个人主页","more":"</li>\n</ul>\n</li>\n<li><h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><ul>\n<li>在 UITextfield 的 delegate 内监听关键字 <code>@</code> 和<code> </code>, 分别实现弹出好友列表和移除文案操作, 这个很简单.</li>\n<li>在用户选择好友后, 文案拼接拼装到 UITextfield 的 text 内; 在监听到 <code> </code>输入的时候, 通过<code>字符串匹配</code>或者<code>正则表达式</code>, 移除光标前一段符合规则的 <code>@A </code>文本.</li>\n<li>在发出文本的时候, 基于字符串查找逻辑, 将特殊文本和用户id做关联, 将整个数据包发送给后端. 然后进行转发.</li>\n<li>以上, 这个功能就已经实现了. </li>\n</ul>\n</li>\n<li><h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>  上面的方案虽然可以解决基础的问题, 但是(PS1: 凡事总有一个但是; PS2: 大家都讨厌这个但是…)</p>\n<ul>\n<li>如果好友A的昵称在存在空格 <code> </code> (文本: <code>@A B </code>)的情况下, 以上方案的删除就会失效. 我们也不能无脑暴力的按照 <code>@</code> 和 <code> </code> 进行删除文本, 这样 <code>BUG🐛</code> 会更加严重.</li>\n<li>因为需要考虑数据的跨端传输, 而因为用户昵称可能存在 emoji 字符或者其他特殊字体, 所以使用位置计算告知后端index进行匹配的话, 可能会有不同语言的index计算错误问题. 比如 <a href=\"https://swift.org/\">swift</a><del>谁会不爱 <code>swift</code> 那</del> 内的 <code>😊.count</code> 为 1, 而 <code>objective-C</code> 和 <code>java </code>是 2. 所以这个方案怎么看都不那么合理…<br>这时候, 多么希望有方案可以给某一段文案设置(标记)成一个整体的方案啊.</li>\n</ul>\n</li>\n<li><h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>  原生的控件已经满足不了或者需要大量的定制化才能我们的需求了, 目光只能看向开源轮子. 这时候 <code>YYText</code> 引入了眼帘.<br>  <code>YYText</code>的数据流<code>demo</code>中, 使用了 <code>YYTextBackedString</code> 实现 <code>@&quot;:)</code> 替换 😊 制作表情菜单. 这就给了鶸需求实现的灵感.</p>\n<ul>\n<li>首先自定义一个 <code>YYTextView</code> 的 <code>textParser</code>. 重写 <code>- (BOOL)parseText:(NSMutableAttributedString *)text selectedRange:(NSRangePointer)selectedRange</code> 方法</li>\n<li>定义一段特殊字符串 <code>BackedString</code> , 里面包含了用户昵称 <code>A</code> 和 他的用户 <code>id</code>, 然后对用户对可见文本 <code>FrontString</code> 为 <code>@A </code>. 配合 <code>NSMutableAttributedString</code> 扩展方法 <code>- yy_setTextBackedString: range:</code>, 对 <code>YYTextView</code> 的可见内容进行替换. 这样我们就把所需要的全部信息藏入了富文本内. </li>\n<li>使用 <code>- yy_setTextBinding: range: </code>将这段可见文本设置成一个整体, 从而实现整体删除.</li>\n<li>使用 <code>- yy_setTextHighlight: range: </code>设置局部文本高亮.</li>\n<li>… 其他的完全可以基于自己的需求自定义.</li>\n</ul>\n</li>\n<li><h4 id=\"回到-BackedString\"><a href=\"#回到-BackedString\" class=\"headerlink\" title=\"回到 BackedString.\"></a>回到 <code>BackedString</code>.</h4><ul>\n<li>这一段自定义文本尽量稍微复杂一点, 不然被黑产破解的话, 线上就会出现一些奇奇怪怪的现象了…</li>\n<li>这里面还有一个问题, 使用以上方案的时候, 如果用户点击这段文本 <code>copy</code> 的时候, 会把密文拿出来. 所以这时候就需要重写 <code>YYText</code> 内的 <code>copy</code> 方法, 把 <code>FrontString</code> 拿出来.<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// Save current selected attributed text to pasteboard.</span><br><span class=\"line\">- (void)_copySelectedTextToPasteboard &#123;</span><br><span class=\"line\">    if (_allowsCopyAttributedString) &#123;</span><br><span class=\"line\">        NSAttributedString *text = [_innerText attributedSubstringFromRange:_selectedTextRange.asRange];</span><br><span class=\"line\">        if (text.length) &#123;</span><br><span class=\"line\">            [UIPasteboard generalPasteboard].yy_AttributedString = text;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        NSString *string = [_innerText attributedSubstringFromRange:_selectedTextRange.asRange].string;</span><br><span class=\"line\">        if (string.length) &#123;</span><br><span class=\"line\">            [UIPasteboard generalPasteboard].string = string;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><h5 id=\"关于接收方显示问题\"><a href=\"#关于接收方显示问题\" class=\"headerlink\" title=\"关于接收方显示问题\"></a>关于接收方显示问题</h5><p>  <code>YYLabel</code>和<code>UILabel</code>都可以用. <del>显示从来都不是问题</del> </p>\n</li>\n<li><h5 id=\"关于-YYText\"><a href=\"#关于-YYText\" class=\"headerlink\" title=\"关于 YYText\"></a>关于 YYText</h5><p>  目前iOS 15已经来了, <code>YYText</code>年久失修, 在某些情况下会出一些奇怪的BUG, 能不用就不用吧. </p>\n</li>\n</ul>"},{"title":"Xcode Server/macOS Server 保姆级教程","date":"2021-08-09T10:06:53.000Z","_content":"\n- #### 简介\n    `Xcode Server` 是苹果官方提供的[持续集成](https://baike.baidu.com/item/持续集成/6250744?fr=aladdin)方案. \n    - 优点: `xcode` 自带工具, 部署简单, ~~有手就能玩~~ 甚至支持 `swift` 脚本.\n    - 缺点: ~~iOS 完美无缺~~ 只支持 apple 体系.\n<!-- more -->\n\n- #### 前提\n    - 准备一个 iOS 的项目\n        - 需要设置了 `remote URL` 的项目, 否则无法使用.\n        - `$ git remote add origin [URL]`\n    - 一个<bold>付费</bold>的 apple 开发者账号. \n    - 去这个[macOS APP store](https://apps.apple.com/cn/app/macos-server/id883878097?mt=12)下载一个 `macOS server` 软件, 安装, 打开启动\n\n- #### 步骤\n    以下步骤全部在 `xcode` 内进行\n    - `command ,` 打开偏好设置, \n    - 选择` Accounts`, `+` 号, 选择 `xcode server`, 选中在 `macOS server` 内相同主机名字的哪个栏目, `next ->`,\n    - 输入 `macOS server` 内的可用 用户(可以自己创建)账户密码. 然后 add 进去\n    - 偏好设置内选择 `server&bot`, 启动. \n    - 项目的操作菜单内, `Product`, `create bot`:\n        - `server` 选择刚才创建的, name随意写. `next ->`\n        - `verify SSH`, 项目的 `git` 地址, 公钥验证. `next ->`\n        - `configuration`, 选择 `scheme`, `export` 可选, 如果你是企业级项目进行分发的话, 需要选择 `plist`, 填写所需配置. `next ->`\n        - `integrate`, 一般选择 `on commit`, 在收到 `commit` 的时候进行编译; 也可以选择 `manually`, 自己主动选择. `clean`, 我选的 `once a weak`, 自己按需选择. `next ->`\n        - `build for`, 按需选择. `next ->`\n        - 配置证书和描述文件, 选择配置项目打包证书 `add to server`. `next ->` \n        - 环境变量, 按需填写. ~~我没有, 我不写~~\n        - `configure bot triggers`, 配置 编译前后脚本和邮件事件. \n            - `pre-integration script`\n                - 打包编译前的脚本\n                    - 一般来说, 我们的项目是 [cocoapods](https://cocoapods.org) 管理的\n                    ```\n                        export LANG=en_US.UTF-8\n                        cd ${XCS_PRIMARY_REPO_DIR}\n                        pwd\n                        rm -f Podfile.lock\n                        /usr/local/bin/pod install\n                    ```\n            - `post-intefration script`\n                - 打包编译后的脚本\n                    - 上报[蒲公英](https://www.pgyer.com/doc/api#uploadApp)\n                    ```\n                    curl -F \"file=@$XCS_PRODUCT\" \\\n                    -F \"uKey=you uKey\" \\\n                    -F \"_api_key=you _api_key\" \\\n                    https://qiniu-storage.pgyer.com/apiv1/app/upload\n                    ```\n                    - 提交 [app store](https://help.apple.com/itc/apploader/#/apdATD1E53-D1E1A1303-D1E53A1126)\n                    ```\n                    #!/bin/sh\n                    altoolPath=\"/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool\"\n                    # 填入你的Apple ID\n                    USERNAME=\"你的AppleID\"\n                    #  需要去Apple ID账户生成 App 专用密码\n                    PASSWORD=\"App 专用密码\"\n\n                    \"$altoolPath\" --validate-app -f ${XCS_PRODUCT} -u ${USERNAME} -p ${PASSWORD} -t ios\n                    \"$altoolPath\" --upload-app -f ${XCS_PRODUCT} -u ${USERNAME} -p ${PASSWORD} -t ios\n\n                    ```\n            - `issure email`\n                - 按需配置\n            - `Periodic Email Report`\n                - 按需配置\n\n- #### 遇到的问题\n    - `macOS server` 付费: 自行解决, [苹果开发者中心的beta](https://developer.apple.com)版本不要钱.\n    - `product` 下 没有 `create bot` 选项: `accounts` 里面添加 `xcode server` 了吗?\n\n- #### `xcode server RESTful API!`\n    - [官方文档](https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/XcodeServerAPIReference)\n    - 也有大佬提供了一个 [ xcode server SDK ](https://github.com/buildasaurs/XcodeServerSDK) 可以用\n    - 推荐体验[xcodeserverapidocs](https://xcodeserverapidocs.docs.apiary.io), 参照各种配置, 便于上手. \n    - 本地的 server地址: [base URL](https://127.0.0.1:20343/api/bots)\n\n#### enjoy~🐸\n        \n    \n\n\n","source":"_posts/xcode-server.md","raw":"---\ntitle: Xcode Server/macOS Server 保姆级教程\ntags:\n  - CI\n  - xcode\n  - iOS\n  - xcode server\n  - 持续集成\ndate: 2021-08-09 18:06:53\n---\n\n- #### 简介\n    `Xcode Server` 是苹果官方提供的[持续集成](https://baike.baidu.com/item/持续集成/6250744?fr=aladdin)方案. \n    - 优点: `xcode` 自带工具, 部署简单, ~~有手就能玩~~ 甚至支持 `swift` 脚本.\n    - 缺点: ~~iOS 完美无缺~~ 只支持 apple 体系.\n<!-- more -->\n\n- #### 前提\n    - 准备一个 iOS 的项目\n        - 需要设置了 `remote URL` 的项目, 否则无法使用.\n        - `$ git remote add origin [URL]`\n    - 一个<bold>付费</bold>的 apple 开发者账号. \n    - 去这个[macOS APP store](https://apps.apple.com/cn/app/macos-server/id883878097?mt=12)下载一个 `macOS server` 软件, 安装, 打开启动\n\n- #### 步骤\n    以下步骤全部在 `xcode` 内进行\n    - `command ,` 打开偏好设置, \n    - 选择` Accounts`, `+` 号, 选择 `xcode server`, 选中在 `macOS server` 内相同主机名字的哪个栏目, `next ->`,\n    - 输入 `macOS server` 内的可用 用户(可以自己创建)账户密码. 然后 add 进去\n    - 偏好设置内选择 `server&bot`, 启动. \n    - 项目的操作菜单内, `Product`, `create bot`:\n        - `server` 选择刚才创建的, name随意写. `next ->`\n        - `verify SSH`, 项目的 `git` 地址, 公钥验证. `next ->`\n        - `configuration`, 选择 `scheme`, `export` 可选, 如果你是企业级项目进行分发的话, 需要选择 `plist`, 填写所需配置. `next ->`\n        - `integrate`, 一般选择 `on commit`, 在收到 `commit` 的时候进行编译; 也可以选择 `manually`, 自己主动选择. `clean`, 我选的 `once a weak`, 自己按需选择. `next ->`\n        - `build for`, 按需选择. `next ->`\n        - 配置证书和描述文件, 选择配置项目打包证书 `add to server`. `next ->` \n        - 环境变量, 按需填写. ~~我没有, 我不写~~\n        - `configure bot triggers`, 配置 编译前后脚本和邮件事件. \n            - `pre-integration script`\n                - 打包编译前的脚本\n                    - 一般来说, 我们的项目是 [cocoapods](https://cocoapods.org) 管理的\n                    ```\n                        export LANG=en_US.UTF-8\n                        cd ${XCS_PRIMARY_REPO_DIR}\n                        pwd\n                        rm -f Podfile.lock\n                        /usr/local/bin/pod install\n                    ```\n            - `post-intefration script`\n                - 打包编译后的脚本\n                    - 上报[蒲公英](https://www.pgyer.com/doc/api#uploadApp)\n                    ```\n                    curl -F \"file=@$XCS_PRODUCT\" \\\n                    -F \"uKey=you uKey\" \\\n                    -F \"_api_key=you _api_key\" \\\n                    https://qiniu-storage.pgyer.com/apiv1/app/upload\n                    ```\n                    - 提交 [app store](https://help.apple.com/itc/apploader/#/apdATD1E53-D1E1A1303-D1E53A1126)\n                    ```\n                    #!/bin/sh\n                    altoolPath=\"/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool\"\n                    # 填入你的Apple ID\n                    USERNAME=\"你的AppleID\"\n                    #  需要去Apple ID账户生成 App 专用密码\n                    PASSWORD=\"App 专用密码\"\n\n                    \"$altoolPath\" --validate-app -f ${XCS_PRODUCT} -u ${USERNAME} -p ${PASSWORD} -t ios\n                    \"$altoolPath\" --upload-app -f ${XCS_PRODUCT} -u ${USERNAME} -p ${PASSWORD} -t ios\n\n                    ```\n            - `issure email`\n                - 按需配置\n            - `Periodic Email Report`\n                - 按需配置\n\n- #### 遇到的问题\n    - `macOS server` 付费: 自行解决, [苹果开发者中心的beta](https://developer.apple.com)版本不要钱.\n    - `product` 下 没有 `create bot` 选项: `accounts` 里面添加 `xcode server` 了吗?\n\n- #### `xcode server RESTful API!`\n    - [官方文档](https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/XcodeServerAPIReference)\n    - 也有大佬提供了一个 [ xcode server SDK ](https://github.com/buildasaurs/XcodeServerSDK) 可以用\n    - 推荐体验[xcodeserverapidocs](https://xcodeserverapidocs.docs.apiary.io), 参照各种配置, 便于上手. \n    - 本地的 server地址: [base URL](https://127.0.0.1:20343/api/bots)\n\n#### enjoy~🐸\n        \n    \n\n\n","slug":"xcode-server","published":1,"updated":"2021-08-09T10:13:49.864Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckszt8srt001lrcp86ne9e0yu","content":"<ul>\n<li><h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>  <code>Xcode Server</code> 是苹果官方提供的<a href=\"https://baike.baidu.com/item/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/6250744?fr=aladdin\">持续集成</a>方案. </p>\n<ul>\n<li>优点: <code>xcode</code> 自带工具, 部署简单, <del>有手就能玩</del> 甚至支持 <code>swift</code> 脚本.</li>\n<li>缺点: <del>iOS 完美无缺</del> 只支持 apple 体系.<span id=\"more\"></span></li>\n</ul>\n</li>\n<li><h4 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h4><ul>\n<li>准备一个 iOS 的项目<ul>\n<li>需要设置了 <code>remote URL</code> 的项目, 否则无法使用.</li>\n<li><code>$ git remote add origin [URL]</code></li>\n</ul>\n</li>\n<li>一个<bold>付费</bold>的 apple 开发者账号. </li>\n<li>去这个<a href=\"https://apps.apple.com/cn/app/macos-server/id883878097?mt=12\">macOS APP store</a>下载一个 <code>macOS server</code> 软件, 安装, 打开启动</li>\n</ul>\n</li>\n<li><h4 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h4><p>  以下步骤全部在 <code>xcode</code> 内进行</p>\n<ul>\n<li><code>command ,</code> 打开偏好设置, </li>\n<li>选择<code> Accounts</code>, <code>+</code> 号, 选择 <code>xcode server</code>, 选中在 <code>macOS server</code> 内相同主机名字的哪个栏目, <code>next -&gt;</code>,</li>\n<li>输入 <code>macOS server</code> 内的可用 用户(可以自己创建)账户密码. 然后 add 进去</li>\n<li>偏好设置内选择 <code>server&amp;bot</code>, 启动. </li>\n<li>项目的操作菜单内, <code>Product</code>, <code>create bot</code>:<ul>\n<li><code>server</code> 选择刚才创建的, name随意写. <code>next -&gt;</code></li>\n<li><code>verify SSH</code>, 项目的 <code>git</code> 地址, 公钥验证. <code>next -&gt;</code></li>\n<li><code>configuration</code>, 选择 <code>scheme</code>, <code>export</code> 可选, 如果你是企业级项目进行分发的话, 需要选择 <code>plist</code>, 填写所需配置. <code>next -&gt;</code></li>\n<li><code>integrate</code>, 一般选择 <code>on commit</code>, 在收到 <code>commit</code> 的时候进行编译; 也可以选择 <code>manually</code>, 自己主动选择. <code>clean</code>, 我选的 <code>once a weak</code>, 自己按需选择. <code>next -&gt;</code></li>\n<li><code>build for</code>, 按需选择. <code>next -&gt;</code></li>\n<li>配置证书和描述文件, 选择配置项目打包证书 <code>add to server</code>. <code>next -&gt;</code> </li>\n<li>环境变量, 按需填写. <del>我没有, 我不写</del></li>\n<li><code>configure bot triggers</code>, 配置 编译前后脚本和邮件事件. <ul>\n<li><code>pre-integration script</code><ul>\n<li>打包编译前的脚本<ul>\n<li>一般来说, 我们的项目是 <a href=\"https://cocoapods.org/\">cocoapods</a> 管理的<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export LANG=en_US.UTF-8</span><br><span class=\"line\">cd $&#123;XCS_PRIMARY_REPO_DIR&#125;</span><br><span class=\"line\">pwd</span><br><span class=\"line\">rm -f Podfile.lock</span><br><span class=\"line\">/usr/local/bin/pod install</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>post-intefration script</code><ul>\n<li>打包编译后的脚本<ul>\n<li>上报<a href=\"https://www.pgyer.com/doc/api#uploadApp\">蒲公英</a><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -F &quot;file=@$XCS_PRODUCT&quot; \\</span><br><span class=\"line\">-F &quot;uKey=you uKey&quot; \\</span><br><span class=\"line\">-F &quot;_api_key=you _api_key&quot; \\</span><br><span class=\"line\">https://qiniu-storage.pgyer.com/apiv1/app/upload</span><br></pre></td></tr></table></figure></li>\n<li>提交 <a href=\"https://help.apple.com/itc/apploader/#/apdATD1E53-D1E1A1303-D1E53A1126\">app store</a><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">altoolPath=&quot;/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool&quot;</span><br><span class=\"line\"># 填入你的Apple ID</span><br><span class=\"line\">USERNAME=&quot;你的AppleID&quot;</span><br><span class=\"line\">#  需要去Apple ID账户生成 App 专用密码</span><br><span class=\"line\">PASSWORD=&quot;App 专用密码&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;$altoolPath&quot; --validate-app -f $&#123;XCS_PRODUCT&#125; -u $&#123;USERNAME&#125; -p $&#123;PASSWORD&#125; -t ios</span><br><span class=\"line\">&quot;$altoolPath&quot; --upload-app -f $&#123;XCS_PRODUCT&#125; -u $&#123;USERNAME&#125; -p $&#123;PASSWORD&#125; -t ios</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>issure email</code><ul>\n<li>按需配置</li>\n</ul>\n</li>\n<li><code>Periodic Email Report</code><ul>\n<li>按需配置</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h4 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h4><ul>\n<li><code>macOS server</code> 付费: 自行解决, <a href=\"https://developer.apple.com/\">苹果开发者中心的beta</a>版本不要钱.</li>\n<li><code>product</code> 下 没有 <code>create bot</code> 选项: <code>accounts</code> 里面添加 <code>xcode server</code> 了吗?</li>\n</ul>\n</li>\n<li><h4 id=\"xcode-server-RESTful-API\"><a href=\"#xcode-server-RESTful-API\" class=\"headerlink\" title=\"xcode server RESTful API!\"></a><code>xcode server RESTful API!</code></h4><ul>\n<li><a href=\"https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/XcodeServerAPIReference\">官方文档</a></li>\n<li>也有大佬提供了一个 <a href=\"https://github.com/buildasaurs/XcodeServerSDK\"> xcode server SDK </a> 可以用</li>\n<li>推荐体验<a href=\"https://xcodeserverapidocs.docs.apiary.io/\">xcodeserverapidocs</a>, 参照各种配置, 便于上手. </li>\n<li>本地的 server地址: <a href=\"https://127.0.0.1:20343/api/bots\">base URL</a></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"enjoy-🐸\"><a href=\"#enjoy-🐸\" class=\"headerlink\" title=\"enjoy~🐸\"></a>enjoy~🐸</h4>","site":{"data":{}},"length":1842,"excerpt":"<ul>\n<li><h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>  <code>Xcode Server</code> 是苹果官方提供的<a href=\"https://baike.baidu.com/item/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/6250744?fr=aladdin\">持续集成</a>方案. </p>\n<ul>\n<li>优点: <code>xcode</code> 自带工具, 部署简单, <del>有手就能玩</del> 甚至支持 <code>swift</code> 脚本.</li>\n<li>缺点: <del>iOS 完美无缺</del> 只支持 apple 体系.","more":"</li>\n</ul>\n</li>\n<li><h4 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h4><ul>\n<li>准备一个 iOS 的项目<ul>\n<li>需要设置了 <code>remote URL</code> 的项目, 否则无法使用.</li>\n<li><code>$ git remote add origin [URL]</code></li>\n</ul>\n</li>\n<li>一个<bold>付费</bold>的 apple 开发者账号. </li>\n<li>去这个<a href=\"https://apps.apple.com/cn/app/macos-server/id883878097?mt=12\">macOS APP store</a>下载一个 <code>macOS server</code> 软件, 安装, 打开启动</li>\n</ul>\n</li>\n<li><h4 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h4><p>  以下步骤全部在 <code>xcode</code> 内进行</p>\n<ul>\n<li><code>command ,</code> 打开偏好设置, </li>\n<li>选择<code> Accounts</code>, <code>+</code> 号, 选择 <code>xcode server</code>, 选中在 <code>macOS server</code> 内相同主机名字的哪个栏目, <code>next -&gt;</code>,</li>\n<li>输入 <code>macOS server</code> 内的可用 用户(可以自己创建)账户密码. 然后 add 进去</li>\n<li>偏好设置内选择 <code>server&amp;bot</code>, 启动. </li>\n<li>项目的操作菜单内, <code>Product</code>, <code>create bot</code>:<ul>\n<li><code>server</code> 选择刚才创建的, name随意写. <code>next -&gt;</code></li>\n<li><code>verify SSH</code>, 项目的 <code>git</code> 地址, 公钥验证. <code>next -&gt;</code></li>\n<li><code>configuration</code>, 选择 <code>scheme</code>, <code>export</code> 可选, 如果你是企业级项目进行分发的话, 需要选择 <code>plist</code>, 填写所需配置. <code>next -&gt;</code></li>\n<li><code>integrate</code>, 一般选择 <code>on commit</code>, 在收到 <code>commit</code> 的时候进行编译; 也可以选择 <code>manually</code>, 自己主动选择. <code>clean</code>, 我选的 <code>once a weak</code>, 自己按需选择. <code>next -&gt;</code></li>\n<li><code>build for</code>, 按需选择. <code>next -&gt;</code></li>\n<li>配置证书和描述文件, 选择配置项目打包证书 <code>add to server</code>. <code>next -&gt;</code> </li>\n<li>环境变量, 按需填写. <del>我没有, 我不写</del></li>\n<li><code>configure bot triggers</code>, 配置 编译前后脚本和邮件事件. <ul>\n<li><code>pre-integration script</code><ul>\n<li>打包编译前的脚本<ul>\n<li>一般来说, 我们的项目是 <a href=\"https://cocoapods.org/\">cocoapods</a> 管理的<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export LANG=en_US.UTF-8</span><br><span class=\"line\">cd $&#123;XCS_PRIMARY_REPO_DIR&#125;</span><br><span class=\"line\">pwd</span><br><span class=\"line\">rm -f Podfile.lock</span><br><span class=\"line\">/usr/local/bin/pod install</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>post-intefration script</code><ul>\n<li>打包编译后的脚本<ul>\n<li>上报<a href=\"https://www.pgyer.com/doc/api#uploadApp\">蒲公英</a><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -F &quot;file=@$XCS_PRODUCT&quot; \\</span><br><span class=\"line\">-F &quot;uKey=you uKey&quot; \\</span><br><span class=\"line\">-F &quot;_api_key=you _api_key&quot; \\</span><br><span class=\"line\">https://qiniu-storage.pgyer.com/apiv1/app/upload</span><br></pre></td></tr></table></figure></li>\n<li>提交 <a href=\"https://help.apple.com/itc/apploader/#/apdATD1E53-D1E1A1303-D1E53A1126\">app store</a><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">altoolPath=&quot;/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool&quot;</span><br><span class=\"line\"># 填入你的Apple ID</span><br><span class=\"line\">USERNAME=&quot;你的AppleID&quot;</span><br><span class=\"line\">#  需要去Apple ID账户生成 App 专用密码</span><br><span class=\"line\">PASSWORD=&quot;App 专用密码&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;$altoolPath&quot; --validate-app -f $&#123;XCS_PRODUCT&#125; -u $&#123;USERNAME&#125; -p $&#123;PASSWORD&#125; -t ios</span><br><span class=\"line\">&quot;$altoolPath&quot; --upload-app -f $&#123;XCS_PRODUCT&#125; -u $&#123;USERNAME&#125; -p $&#123;PASSWORD&#125; -t ios</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>issure email</code><ul>\n<li>按需配置</li>\n</ul>\n</li>\n<li><code>Periodic Email Report</code><ul>\n<li>按需配置</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h4 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h4><ul>\n<li><code>macOS server</code> 付费: 自行解决, <a href=\"https://developer.apple.com/\">苹果开发者中心的beta</a>版本不要钱.</li>\n<li><code>product</code> 下 没有 <code>create bot</code> 选项: <code>accounts</code> 里面添加 <code>xcode server</code> 了吗?</li>\n</ul>\n</li>\n<li><h4 id=\"xcode-server-RESTful-API\"><a href=\"#xcode-server-RESTful-API\" class=\"headerlink\" title=\"xcode server RESTful API!\"></a><code>xcode server RESTful API!</code></h4><ul>\n<li><a href=\"https://developer.apple.com/library/archive/documentation/Xcode/Conceptual/XcodeServerAPIReference\">官方文档</a></li>\n<li>也有大佬提供了一个 <a href=\"https://github.com/buildasaurs/XcodeServerSDK\"> xcode server SDK </a> 可以用</li>\n<li>推荐体验<a href=\"https://xcodeserverapidocs.docs.apiary.io/\">xcodeserverapidocs</a>, 参照各种配置, 便于上手. </li>\n<li>本地的 server地址: <a href=\"https://127.0.0.1:20343/api/bots\">base URL</a></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"enjoy-🐸\"><a href=\"#enjoy-🐸\" class=\"headerlink\" title=\"enjoy~🐸\"></a>enjoy~🐸</h4>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckszt8sre0007rcp8cf247ibd","category_id":"ckszt8srg000arcp8b2vz4962","_id":"ckszt8sro000trcp8hk600itl"},{"post_id":"ckszt8sre0007rcp8cf247ibd","category_id":"ckszt8sri000grcp84b335pyg","_id":"ckszt8sro000vrcp8fabe5ldj"},{"post_id":"ckszt8sre0007rcp8cf247ibd","category_id":"ckszt8srj000lrcp81273gdf3","_id":"ckszt8sro000xrcp89tmpd9y4"},{"post_id":"ckszt8srg000crcp80hqi8ba8","category_id":"ckszt8srg000arcp8b2vz4962","_id":"ckszt8srp0010rcp8by149dsc"},{"post_id":"ckszt8srg000crcp80hqi8ba8","category_id":"ckszt8sri000ercp85u546e4g","_id":"ckszt8srp0012rcp826lwfwfe"},{"post_id":"ckszt8srg000crcp80hqi8ba8","category_id":"ckszt8sri000ircp87olqef18","_id":"ckszt8srp0013rcp84110ax0h"},{"post_id":"ckszt8srg000crcp80hqi8ba8","category_id":"ckszt8srn000qrcp81tkuco51","_id":"ckszt8srp0015rcp8asolfiw7"}],"PostTag":[{"post_id":"ckszt8sr70001rcp8hvm1cfsv","tag_id":"ckszt8src0004rcp81q320snd","_id":"ckszt8srj000krcp8euqc4bh8"},{"post_id":"ckszt8sr70001rcp8hvm1cfsv","tag_id":"ckszt8srf0009rcp86l11002z","_id":"ckszt8srj000mrcp87w19b6gj"},{"post_id":"ckszt8sr70001rcp8hvm1cfsv","tag_id":"ckszt8srh000drcp8c58j2pmt","_id":"ckszt8srm000orcp84cuh3a1n"},{"post_id":"ckszt8sr70001rcp8hvm1cfsv","tag_id":"ckszt8sri000frcp89vgpa1m5","_id":"ckszt8srm000prcp8caiz6i9r"},{"post_id":"ckszt8sr70001rcp8hvm1cfsv","tag_id":"ckszt8sri000hrcp88o7vekpa","_id":"ckszt8sro000srcp871728917"},{"post_id":"ckszt8srd0006rcp856zwd95b","tag_id":"ckszt8srj000jrcp84xqtc6d8","_id":"ckszt8sro000wrcp8hqev75r3"},{"post_id":"ckszt8srd0006rcp856zwd95b","tag_id":"ckszt8src0004rcp81q320snd","_id":"ckszt8sro000yrcp8051nc28o"},{"post_id":"ckszt8srd0006rcp856zwd95b","tag_id":"ckszt8sro000rrcp80zji88qr","_id":"ckszt8srp0011rcp89428ae94"},{"post_id":"ckszt8sre0007rcp8cf247ibd","tag_id":"ckszt8sro000urcp8e6i9bgnc","_id":"ckszt8srp0017rcp802gwe946"},{"post_id":"ckszt8sre0007rcp8cf247ibd","tag_id":"ckszt8sro000zrcp816at3plg","_id":"ckszt8srp0018rcp81wus4zj5"},{"post_id":"ckszt8sre0007rcp8cf247ibd","tag_id":"ckszt8srp0014rcp82k3ob55h","_id":"ckszt8srp001arcp8blr98870"},{"post_id":"ckszt8srf0008rcp81vr0h90x","tag_id":"ckszt8src0004rcp81q320snd","_id":"ckszt8srq001crcp87aya0bzm"},{"post_id":"ckszt8srf0008rcp81vr0h90x","tag_id":"ckszt8srp0016rcp8bjxy8kgv","_id":"ckszt8srq001drcp85z2nbq7z"},{"post_id":"ckszt8srf0008rcp81vr0h90x","tag_id":"ckszt8srp0019rcp84pd44h17","_id":"ckszt8srs001frcp803028wb4"},{"post_id":"ckszt8srg000crcp80hqi8ba8","tag_id":"ckszt8sro000urcp8e6i9bgnc","_id":"ckszt8srs001hrcp8eh3rdw7a"},{"post_id":"ckszt8srg000crcp80hqi8ba8","tag_id":"ckszt8src0004rcp81q320snd","_id":"ckszt8srs001ircp8a7vf7zuz"},{"post_id":"ckszt8srg000crcp80hqi8ba8","tag_id":"ckszt8srq001ercp82semgh2j","_id":"ckszt8srs001jrcp89py5hr3o"},{"post_id":"ckszt8srg000crcp80hqi8ba8","tag_id":"ckszt8srs001grcp8fgif58yu","_id":"ckszt8srs001krcp8hejrh4fe"},{"post_id":"ckszt8srt001lrcp86ne9e0yu","tag_id":"ckszt8sru001mrcp8hq574k1l","_id":"ckszt8srv001qrcp8773i2jvh"},{"post_id":"ckszt8srt001lrcp86ne9e0yu","tag_id":"ckszt8sru001nrcp8hbcp1c4h","_id":"ckszt8srv001rrcp8875p2r7i"},{"post_id":"ckszt8srt001lrcp86ne9e0yu","tag_id":"ckszt8src0004rcp81q320snd","_id":"ckszt8srv001srcp8h0q20r9l"},{"post_id":"ckszt8srt001lrcp86ne9e0yu","tag_id":"ckszt8srv001orcp8er1sewy3","_id":"ckszt8srv001trcp82ml2ct6e"},{"post_id":"ckszt8srt001lrcp86ne9e0yu","tag_id":"ckszt8srv001prcp8bvzsc9s2","_id":"ckszt8srv001urcp8f2sd289y"}],"Tag":[{"name":"iOS","_id":"ckszt8src0004rcp81q320snd"},{"name":"识别","_id":"ckszt8srf0009rcp86l11002z"},{"name":"vision","_id":"ckszt8srh000drcp8c58j2pmt"},{"name":"SDK","_id":"ckszt8sri000frcp89vgpa1m5"},{"name":"CoreML","_id":"ckszt8sri000hrcp88o7vekpa"},{"name":"spotlight","_id":"ckszt8srj000jrcp84xqtc6d8"},{"name":"搜索","_id":"ckszt8sro000rrcp80zji88qr"},{"name":"技术","_id":"ckszt8sro000urcp8e6i9bgnc"},{"name":"Hexo","_id":"ckszt8sro000zrcp816at3plg"},{"name":"Next","_id":"ckszt8srp0014rcp82k3ob55h"},{"name":"image preview","_id":"ckszt8srp0016rcp8bjxy8kgv"},{"name":"Photos","_id":"ckszt8srp0019rcp84pd44h17"},{"name":"艾特","_id":"ckszt8srq001ercp82semgh2j"},{"name":"YYText","_id":"ckszt8srs001grcp8fgif58yu"},{"name":"CI","_id":"ckszt8sru001mrcp8hq574k1l"},{"name":"xcode","_id":"ckszt8sru001nrcp8hbcp1c4h"},{"name":"xcode server","_id":"ckszt8srv001orcp8er1sewy3"},{"name":"持续集成","_id":"ckszt8srv001prcp8bvzsc9s2"}]}}